예외란 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류다.
이런 예외를 예외처리를 통해 프로그램을 종료하지 않고 정상 실행상태가 유지되도록 할 수 있다.

예외는 두가지 종류가 있다.
1. 일반예외(Exception)
 일반 예외는 컴파일러 체크 예외라고도 하는데 자바 소스를 컴파일하는 과정에서 예외처리코드가 필요한지 검사한다.
 만약 예외처리코드가 없다면 컴파일 오류가 발생한다.
2. 실행예외(Runtime Exception)
 실행 예외는 컴파일하는 과정에서 예외처리코드를 검사하지 않는 예외를 말한다.
컴파일 시 예외처리를 확인하는 차이일뿐 두가지 예외는 모두 예외처리가 필요하다.
자바에서는 예외를 클래스로 관리한다. JVM은 프로그램을 실행하는 도중에 예외가 발생하면 해당예외 클래스로 객체를 생성한다.
그리고 나서 예외처리코드에서 예외 객체를 이용할 수 있도록 해준다.
모든 예외클래스들은 java.lang.Exception 클래스를 상속받는다.
일반예외와 실행예외클래스를 구별하는 방법은 일반예외는 Exception을 상속받지만 Runtime Exception을 상속받지않는 클래스들이고,
실행예외는 Runtime Exception을 상속받은 클래스들이다.

실행 예외
 실행예외는 자바컴파일러가 체크를 하지 않기 때문에 오로지 개발자의 경험에 의해서 예외처리 코드를 삽입해야한다.

 1. NullPointerException
  가장 빈번하게 발생하는 실행예외이며 객체참조가 없는 상태, 즉 null값을 갖는 참조변수로 객체접근연산자인 도트(.)를 사용했을 때 발생한다.
  객체가 없는상태에서 객체를 사용하러 하니 예외가 발생함.

 2. ArrayIndexOutOfBoundsException
  배열에서 인덱스 범위를 초과하여 사용할 경우 실행 예외인 java.lang.ArrayIndexOutOfBoundsException이 발생함.

 3. NumberFormatException
  프로그램을 개발하다 보면 문자열로 되어있는 데이터를 숫자로 변경하는 경우가 자주 발생하는데
  문자열을 숫자로 변환하는 방법 중 대표적으로 Integer(정수로변환)과 Double(실수로변환) parse메소드가 있다.
  이 integer과 Double은 포장(Wrapper)클래스라고 하는데 이 클래스의 정적 메소드인 parse() 메소드를 사용한다.
  이 메소드들은 매개값인 문자열이 숫자로 변환될 수 있다면 숫자를 리턴하지만 숫자로 변환될 수 없는 문자가 포함되어있다면 이 예외가 발생한다.

 4. ClassCastException
  타입변환(Casting)은 상위 클래스와 하위 클래스 간에 발생하고 구현클래스와 인터페이스 간에도 발생한다.
  이러한 관계가 아니라면 클래스는 다른 클래스로 타입 변환할 수 없다.
  억지로 타입변환을 시도할 경우 이 예외가 발생한다.

예외 처리 코드
 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고 정상 실행을 유지할 수 있도록 처리하는 코드를 말한다.
 컴파일러는 소스파일을 컴파일할 때 일반예외가 발생할 가능성이 있는 코드를 발견하면 컴파일 오류를 발생시켜
 개발자로 하여금 강제적으로 예외처리를 코드로 작성하도록 요구한다.
 그러나 실행예외는 컴파일러가 체크해주지 않기 때문에 예외처리 코드를 개발자의 경험을 바탕으로 작성해야 한다.
 예외처리코드는 try-catch-finally 블록을 이용한다.
 생성자 내부와 메소드 내부에서 작성되어 일반예외와 실행예외가 발생할 경우 예외처리를 할 수 있도록 해준다.
 try{
    예외 발생 가능 코드
 }catch(예외클래스 e){
    예외처리
 }finally{
    항상실행
 }
 만약 try 블록의 코드가 예외발생없이 정상 실행되면 finally블록의 코드가 실행되며
 예외가 발생했다면 catch블록으로 이동하여 예외처리 코드를 실행하고 finally블록 코드를 실행한다.
 try, catch블록에서 return문을 사용하더라도 finally는 항상 실행되며 생략가능하다.

다중 catch
 try블록 내부는 다양한 종류의 예외가 발생할 수 있다. 이 때 예외별로 예외 처리 코드를 다중 catch문을 통해 직상할 수 있다.
 catch 블록이 여러 개라 할지라도 단 하나의 catch 블록만 실행된다.
 왜냐하면 하나의 예외가 발생하면 그 즉시 실행을 멈추고 해당 catch 블록으로 가기 때문이다.

다중 catch문의 순서
 다중 catch문을 작성할 때 주의할 점은 상위예외 클래스가 하위 예외클래스보다 아래쪽에 위치해야한다.
 try블록에서 예외가 발생했을 때 예외를 처리해줄 catch블록은 위에서부터 차래대로 검색된다.

멀티 catch
 자바7부터 하나의 catch블록에 여러개의 예외를 처리할 수 있도록 멀티 catch기능을 추가했다.
 ex)catch(ArrayIndexOutofBoundsException | NumberFormatException e)

자동 리소스 닫기
 자바7부터 새로 추가된 try-with-resources를 사용하면 예외 발생 여부와 상관없이 사용했던 리소스 객체(입출력 스트림, (서버)소켓, 각종 체널)
 의 close() 메소드를 호출해서 안전하게 리소스를 닫아준다. 여기서 리소스는 데이터를 읽고 쓰는 객체라 생각하면 된다.
 try-with-resources를 사용하기 위해서는 조건이 있는데 리소스 객체는 java.lang.AutoCloseable 인터페이스를 구현하고 있어야한다.
 AutoCloseable에는 close()메소드가 정의되어 있는데 try-with-resources는 바로 이 close()메소드를 자동 호출한다.
 try-with-resources 문에서 예외가 발생하는 즉시 자동으로 close()가 호출된다!!

예외 떠넘기기
 메소드 내부에서 예외가 발행할 수 있는 코드를 작성할 때 try-catch문으로 예외를 처리하는 것이 기본이지만
 경우에 따라서는 메소드를 호출한 곳으로 예외를 넘길 수도있다. 이 때 사용하는 키워드가 throws이다.
 throws키워드는 메소드 선언부 끝에 작성되어 메소드에서 처리하지 않은 예외를 호출한 곳으로 떠넘기는 역할을 한다.
 리턴타입 메소드명(매개변수) throws 예외클래스1, 예외클래스2,.. {
 }
 throws 키워드가 붙어있는 메소드는 반드시 try 블록 내에서 호출되어야 한다. 그리고 catch 블록에서 떠넘겨 받은 예외를 처리해야한다.

사용자 정의 예외
 프로그램 개발을 하다보면 자바 표준 API에서 제공하는 예외클래스만으로는 다양한 종류의 예외를 표현할 수 없다.
 개발자가 직접 정의해서 만드는 사용자정의예외(애플리케이션예외)가 필요한 경우가 있다.

 사용자 정의 예외 클래스 선언
  사용자 정의 예외 클래스는 컴파일러가 체크하는 일반예외로 선언할 수도있고, 컴파일러가 체크하지 않는 실행 예외로 선언할 수도 있다.
  일반 예외로 선언할 경우 Exception을 상속하면 되고, 실행 예외로 선언할 경우에는 RuntimeException을 상속하면 된다.
  사용자 정의 예외 클래스 이름은 Exception으로 끝나는게 좋고 필드, 생성자, 메소드 선언들을 포함할 수 있지만 대부분 생성자 선언만을 포함한다.
  생성자는 두 개를 선언하는 것이 일반적인데, 하나는 매개변수가 없는 기본생성자이고 다른 하나는 예외발생원인(예외메시지)을 전달하기 위해
  String 타입의 매개변수를 갖는 생성자이다. String 타입의 매개변수를 갖는 생성자는 상위 클래스의 생성자를 호출하여 예외메시지를 넘겨준다.
  예외메세지의 용도는 catch블록의 예외 처리 코드에서 이용하기 위해서이다.
  코드에서 예외를 발생시키는 방법은 두가지다.
  throw new XXXException();
  throw new XXXException("메시지");
  예외 객체를 생성할때 만약 catch블록에서 예외메시지가 필요하다면 예외메시지를 갖는 생성자를 이용해야한다.
  예외 발생코드를 가지고 있는 메소드는 내부에서 try-catch 문으로 예외를 처리할 수 있지만,
  대부분 자신을 호출한 곳에서 예외를 처리하도록 throws 키워드로 예외를 떠넘긴다.
  void method() throws XXXException {
    throw new XXXException("메시지");
  }
  따라서 throws 키워드를 포함하고있는 메소드는 호출한 곳에서 예외처리를 해주어야한다.
  try{
    method();
  }catch(XXXException e){
    //예외처리
  }

예외 정보 얻기
 try블록에서 예외가 발생되면 예외객체는 catch블록의 매개변수에서 참조하게 되므로 매개변수를 이용하면 예외객체의 정보를 알수있다.
 모든 예외 객체는 Exception클래스를 상속하기 때문에 Exception이 가지고 있는 메소드들을 모든 예외객체에서 호출할 수 있다.
 그 중에서도 많이 사용되는 메소드는 getMessage()와 printStackTrace() 이다.