스트림은 자바8부터 추가된 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 해주는 반복자이다.

 반복자 스트림

  자바7 이전까지는 List<String> 컬렉션에서 요소를 순차적으로 처리하기 위해 Iterator 반복자를 다음과 같이 사용해 왔다
   List<String> list = Arrays.asList("홍길동","갑을병","나란히");
   Iterator<String> iterator = list.iterator();
   while(iterator.hasNext()) {
       String name= iterator.next();
   }
  이 코드를 Stream을 사용해서 변경하면 다음과 같다.
   List<String> list = Arrays.asList("홍길동","갑을병"."나란히");
   Stream<String> stream = list.stream();
   stream.forEach( name -> System.out.println(name) );

  컬렉션의 Stream() 메소드로 스트림 객체를 얻고 나서 stream.forEach() 메소드를 통해 컬렉션의 요소를 하나씩 콘솔에 출력한다.
  forEach() 메소드는 다음과 같이 Consumer 함수적 인터페이스 타입의 매개값을 가지므로 컬렉션의 요소를 소비할 코드를 람다식으로 기술할 수 있다.
  void forEach(Consumer<T> action)
  Iterator를 사용한 코드와 Stream을 사용한 코드를 비교해보면 Stream을 사용하는 것이 훨씬 단순해 보인다.

 스트림의 특징
  Stream은 Iterator와 비슷한 역할을 하는 반복자이지만 람다식으로 요소처리코드를 제공하는 점과 내부 반복자를 사용하므로 병렬처리가 쉽다는 점
  그리고 중간 처리와 최종처리 작업을 수행하는 점에서 많은 차이를 가지고 있다.

  1. 람다식으로 요소 처리 코드를 제공한다.
   Stream이 제공하는 대부분의 요소처리 메소드는 함수적 인터페이스 매개 타입을 가지기 때문에 람다식 또는 메소드 참조를 이용해서 요소 처리 내용을
   매개값으로 전달할 수 있다.

  2. 내부 반복자를 사용하므로 병렬 처리가 쉽다.
   외부반복자란 개발자가 코드로 직접 컬렉션의 요소를 반복해서 가져오는 코드패턴을 말한다.
   index를 이용하는 for문 그리고 Iterator을 이용하는 while문은 모두 외부 반복자를 이용하는 것이다.
   반면에 내부 반복자는 컬렉션 내부에서 요소들을 반복시키고 개발자는 요소당 처리해야 할 코드만 제공하는 코드 패턴을 말한다.
   내부 반복자를 사용해서 얻는 이점은 컬렉션 내부에서 어떻게 요소를 반복시킬 것인가는 컬렉션에게 맡겨두고 개발자는 요소처리 코드에만 집중할 수 있다는 것이다.
   내부 반복자는 요소들의 반복순서를 변경하거나 멀티 코어 CPU를 최대한 활용하기 위해 요소들을 분배시켜 병렬 작업을 할 수 있게 도와주기 때문에
   하나씩 처리하는 순차적 외부 반복자보다는 효율적으로 요소를 반복시킬 수 있다.
   Stream을 이용하면 코드도 간결해지지만 요소의 병렬 처리가 컬렉션 내부에서 처리되므로 효율적이다.
   병렬처리란 한 가지 작업을 서브 작업으로 나누고 서브 작업들을 분리된 스레드에서 병렬적으로 처리하는 것을 말한다.
   병럴 처리 스트림을 이용하면 런타임 시 하나의 작업을 서브 작업으로 자동으로 나누고 서브 작업의 결과를 자동으로 결합해서 최종 결과물을 생성한다.

  3. 스트림은 중간처리와 최종처리를 할 수 있다.
   스트림은 컬렉션의 요소에 대해 중간처리와 최종처리를 수행할 수 있는데 중간처리에서는 매핑, 필터링, 정렬을 수행하고 최종처리에서는 반복, 카운팅, 평균, 총합 등의 집계 처리를 수행한다.

스트림의 종류
 자바 8부터 새로 추가된 java.util.stream 패키지에는 스트림 API들이 있다. 패키지 내용을 보면 BaseStream 인터페이스를 부모로 해서 자식 인터페이스들이 있다.
 BaseStream 인터페이스에는 모든 스트림에서 사용할 수 있는 공통 메소드들이 정의되어 있을 뿐 코드에서 직접적으로 사용되지 않는다.
 하위 스트림인 Stream, IntStream, LongStream, DoubleStream 은 각각 객체요소와 기본 타입인 int, long, double 요소를 처리하는 스트림이다.
 주로 컬렉션과 배열에서 소스을 얻지만 int범위, long범위, 디렉토리, 파일, 랜덤수 소스로 부터 스트림 구현객체를 얻을 수도있다.

스트림 파이프라인
 대량의 데이터를 가공해서 축소하는 것을 일반적으로 리덕션(Reduction)이라고 하는데 데이터의 합계, 평균값, 카운팅, 최대값, 최소값 등이 대표적인 리덕션의 결과물이라고 볼 수 있다.
 그러나 컬렉션의 요소를 리덕션의 결과물로 바로 집계할 수 없을 경우에는 집계하기 좋도록 필터링, 매핑, 정렬, 그룹핑 등의 중간 처리가 필요하다.

 중간처리와 최종처리
  스트림은 데이터의 필터링, 매핑, 정렬, 그룹핑 등의 중간처리와 합계, 평균, 카운팅, 최대값, 최소값 등의 최종처리를 파이프라인으로 해결한다.
  파이프라인은 여러 개의 스트림이 연결되어 있는 구조를 말한다. 파이트라인에서 최종처리를 제외하고는 모두 중간처리 스트림이다.
  중간 스트림이 생성될 때 요소들이 바로 중간처리되는 것이 아니라 최종처리가 시작되기 전까지 중간처리는 지연된다.
  최종처리가 시작되면 비로소 컬렉션의 요소가 하나씩 중간 스트림에서 처리되고 최종처리까지 오게 된다.
  Stream 인터페이스에는 필터링, 매핑, 정렬 등의 많은 중간처리 메소드가 있는데 이 메소드들은 중간처리된 스트림을 리턴한다.
  그리고 이 스트림에서 다시 중간처리 메소드를 호출해서 파이프라인을 형성하게 된다.

 중간처리 메소드와 최종처리 메소드
  중간처리 메소드와 최종처리 메소드를 쉽게 구분하는 방법은 리턴타입을 보면 된다.
  리턴타입이 스트림이라면 중간처리 메소드이고 기본타이거나 OptionalXXX라면 최종처리 메소드이다.

1. 필터링(distinct(), filter())
  필터링은 중간 처리 기능으로 요소를 걸러내는 역할을 한다. 필터링 메소드인 두 메소드는 모든 스트림이 가지고 있는 공통 메소드이다.

  distinct() 메소드는 중복을 제거하는데 Stream의 경우 Object.equals(Object)가 true이면 동일한 객체로 판단하고 중복을 제거한다.
  IntStream, LongStream, DoubleStream은 동일값일 경우 중복을 제거한다.

  filter() 메소드는 매개값으로 주어진 Predicate가 true를 리턴하는 요소만 필터링한다.

2. 매핑(flatMapXXX(), mapXXX(), asXXXStream(), boxed())
 매핑은 중간처리기능으로 스트림의 요소를 다른 요소로 대체하는 작업을 말한다.
 스트림에서 제공하는 매핑 메소드는 flaxXXX(), mapXXX(), asDoubleStream(), asLongStream(), boxed() 가 있다.

 1) flatMapXXX() 메소드
  이 메소드는 요소를 대체하는 복수 개의 요소들로 구성된 새로운 스트림을 리턴한다.
  메소드 종류(리턴타입 - 메소드(매개변수) - 요소->대체요소)
   Stream<R> - flatMap(Function<T, Stream<R>>) - T->Stream<R>
   DoubleStream - flatMap(DoubleFunction<DoubleStream>) - double->DoubleStream //int, long도 동일
   DoubleStream - flatMapToDouble(Function<T, DoubleStream>) - T->DoubleStream //int, long도 동일
   (flatMapXXXMethod 패키지 참조)

 2) mapXXX() 메소드
  mapXXX() 메소드는 요소를 대체하는 요소로 구성된 새로운 스트림을 리턴한다.
  메소드 종류
   Stream<R> - map(Function<T, R>) - T->R
   DoubleStream - mapToDouble(ToDoubleFunction<T>) - T->double // int,long도 동일
   DoubleStream - map(DoubleUnaryOperator) - double->double // int, long도 동일( int, long->double)
   IntStream - mapToInt(DoubleToIntFunction) - double->int // double,long도 동일
   Stream<U> - mapToObj(DoubleFunction<U>) - double->U //int, long도 동일
   (mapXXXMethod 패키지 참조)

 3) asDoubleStream(), asLongStream(), boxed() 메소드
  asDoubleStream() 메소드는 IntStream의 int 요소 또는 LongStream의 long 요소를 double요소로 타입 변환해서 DoubleStream을 생성한다.
  마찬가지로 asLongStream() 메소드는 IntStream의 int 요소를 long 요소로 타입변환해서 LongStream()을 생성한다.
  boxed() 메소드는 int, long, double 요소를 Integer, Long, Double 요소로 박싱해서 Stream을 생성한다.
  메소드 종류
   DoubleStream - asDoubleStream() - int->double, long->double
   LongStream - asLongStream() - int->long
   Stream<Integer> - boxed() - int->Integer // long, double 동일
   (asDoubleStreamAndBoxedMethod 패키지 참조)

정렬
 스트림은 요소가 최종 처리되기 전에 중간 단계에서 요소를 정렬해서 최종 처리 순서를 변경할 수 있다.
 요소를 정렬하는 메소드
  Stream<T> - sorted() - 객체를 Comparable 구현 방법에 따라 정렬
  Stream<T> - sorted(Comparator<T>) - 객체를 주어진 Comparator에 따라 정렬
  DoubleStream - sorted() - double 요소를 오름차순으로 정렬 // int, long 동일
 객체 요소일 경우에는 클래스가 Comparable을 구현하지 않으면 sorted() 메소드를 호출했을 때 ClassCastException이 발생하기 때문에
 Comparable을 구현한 요소에서만 sorted() 메소드를 호출해야 한다. Comparable 오버라이딩 필요!
 (sortedMethod 패키지 참조)

루핑(peek(), forEach())
 루핑은 요소 전체를 반복하는 것을 말한다. 루핑하는 메소드에는 peek(), forEach()가 있다. 이 두 메소드는 루핑한다는 기능은 동일하지만 동작 방식이 다르다.
 peek()는 중간 처리 메소드이고, forEach()는 최종 처리 메소드이다.

 peek()는 중간 처리 단계에서 전체 요소를 루핑하면서 추가적인 작업을 하기 위해 사용한다.
 최종 처리 메소드가 실행되지 않으면 지연되기 때문에 반드시 최종 처리 메소드가 호출되어야 동작한다.
 예를 들어 필터링 후 어떤 요소만 남았는지 확인하기 위해 다음과 같이 peek()를 마지막에 호출하면 스트림은 전혀 동작하지 않는다.
  intStream.filter( a-> a%2 == 0).peek( a -> System.out.println(a) )
 만약 요소 처리의 최종단계가 합을 구하는 거라면 peek()메소드 호출 후 sum()을 호출해야만 peek()가 정상적으로 동작한다.

 forEach()는 최종 처리 메소드이기 때문에 파이프라인 마지막에 루핑하면서 요소를 하나씩 처리한다.
 forEach()는 요소를 소비하는 최종 처리 메소드이므로 이후에 sum()과 같은 다른 최종 메소드를 호출하면 안된다.
 (loopingPeekForEachMethod 패키지 참조)

매칭(allMatch(), anyMatch(), noneMatch())
 스트림 클래스는 최종 처리 단계에서 요소들이 특정 조건에 만족하는지 조사할 수 있도록 세가지 매칭 메소드를 제공하고 있다.
 allMatch() 메소드는 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하는지 조사하고,
 anyMatch() 메소드는 최소한 한 개의 요소가 매개값으로 주어진 Predicate의 조건을 만족하는지 조사한다.
 noneMatch() 메소드는 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하지 않는지 조사한다.
 리턴타입은 boolean 임. (matchMethod 패키지 참조)

기본 집계(sum(), count(), average(), max(), min())
 집계(Aggregate)는 최종 처리 기능으로 요소들을 처리해서 카운팅, 합계, 평균값, 최대값, 최소값 등과 같이 하나의 값으로 산출하는 것을 말한다.
 집계는 대량의 데이터를 가공해서 축소하는 리덕션이라고 볼 수 있다.

 스트림이 제공하는 기본 집계
  long - count() - 요수 개수
  OptionalXXX - findFirst() - 첫 번째 요소
  Optional<T>, OptionalXXX - max(Comparator<T>), max() - 최대 요소
  Optional<T>, OptionalXXX - min(Comparator<T>), min() - 최소 요소
  OptionalDouble - average() - 요소 평균
  int, long, double - sum() - 요소 총합
 위 메소드에서 리턴하는 OptionalXXX는 자바 8에서 추가한 Optional, OptionalDouble, OptionalInt, OptionalLong 클래스 타입을 말한다.
 이들은 값을 저장하는 값 기반 클래스(value-based class)들이다. 이 객체에서 값을 얻기 위해서는 get() 또는 getAsDouble(), getAsInt(), getAsLong()을 호출하면 된다.
 (aggregateMethod 패키지 참조)

 Optional 클래스
  Optional, OptionalDouble,Int,Long 클래스들은 저장하는 값의 타입만 다를 뿐 제공하는 기능은 거의 동일하다.
  Optional 클래스는 단순히 집계 값만 저장하는 것이 아니라 집계 값이 존재하지 않을 경우 디폴트 값을 설정할 수도 있고, 집계 값을 처리하는 Consumer도 등록할 수 있다.

  Optional 클래스가 제공하는 메소드
   boolean - isPresent() - 값이 저장되어 있는지 여부
   T,double,int,long - orElse<T>, orElse<double>, orElse<int>, orElse<double>  - 값이 저장되어 있지 않을 경우 디폴트 값 지정
   void - ifPresent(Consumer), ifPresent(DoubleConsumer), ifPresent(IntConsumer), ifPresent(LongConsumer) - 값이 저장되어 있을 경우 Consumer에서 처리

   컬렉션의 요소는 동적으로 추가되는 경우가 많다. 만약 컬렉션의 요소가 추가되지 않아 저장된 요소가 없을 경우
    List<Integer> list = new ArrayList<>();
    double avg = list.stream().mapToint(Interger :: intvalue).average().getAsDouble();
    System.out.printIn("평균: "+avg);
   요소가 없기 때문에 평균값도 있을 수 없다. 그래서 NoSuchElementException 예외가 발생한다.
   이런 요소가 없을 경우 에외를 피하는 세 가지 방법이 있다.

   1. Optional 객체를 얻어 isPresent() 메소드로 평균값 여부를 확인한다. isPresent() 메소드가 true를 리턴할 때만 getAsDouble() 메소드로 평균값을 얻는다.
    OptionalDouble optional = list.stream().mapToInt(Integer :: intValue).average();
    if(optional.isPresent(){
        System.out.println("평균: " + optional.getAsDouble());
    }else{
        System.out.println("평균: 0.0");
    }

    2. orElse() 메소드로 디폴트 값을 정해놓는다. 평균값을 구할 수 없는 경우 orElse()의 매개값이 디폴트 값이 된다.
     double avg = list.stream().mapToInt(Integer :: intValue).average().orElse(0.0);
     System.out.println("평균: " + avg);

    3. ifPresent() 메소드로 평균값이 있을 경우에만 값을 이용하는 람다식을 실행한다.
     list.stream().mapToInt(Integer :: intValue).average().ifPresent(a -> System.out.println("평균: " +a));
    (optionalClass 참조)


커스텀 집계(reduce())
 스트림은 기본 집계 메소드인 sum(), average() 등을 제공하지만, 프로그램화해서 다양한 집계 결과물을 만들 수 있도록 reduce() 메소드를 제공한다.
  인터페이스 - 리턴 타입 - 메소드
  Stream - Optional<T> -  reduce(BinaryOperator<T> accumulator)
  Stream - T - reduce(T identity, BinaryOperator<T> accumulator)
  IntStream - OptionalInt - reduce(IntBinaryOperator op) // long, double 동일
  IntStream - int - reduce(int identity, IntBinaryOperator op) // long, double 동일

 각 인터페이스에는 매개타입으로 XXXOperator, 리턴 타입으로 OptionalXXX, int, long, double을 가지는 reduce() 메소드가 오버로딩 되어있다.
 스트림에 요소가 전혀 없을 경우 디폴트 값인 identity 매개값이 리턴된다. XXXOperator 매개값은 집계 처리를 위한 람다식을 대입한다.
  int sum = studentList.stream().map(Student :: getScore).reduce((a, b) -> a+b).get();
  위 코드는 요소가 없을 경우 NoSuchElementException 발생하지만
  int sum = studentList.stream().map(Student :: getScore).reduce(0, (a, b) -> a+b);
  위 코드는 디폴트값(identity)인 0을 리턴하고 요소가 있을 경우는 동일한 결과를 산출한다.
  (reduceMethod 패키지 참조)

수집(collect())
 스트림은 요소들을 필터링 또는 매핑한 후 요소들을 수집하는 최종처리 메소드인 collect()를 제공하고 있다.
 이 메소드를 이용하면 필요한 요소만 컬렉션으로 담을 수 있고 요소들을 그룹핑한 후 집계(리덕션) 할 수있다.

 필터링한 요소 수집
  Stream의 collect 메소드는 필터링 또는 매핑된 요소들을 새로운 컬렉션에 수집하고 이 컬렉션을 리턴한다.
   리턴타입 - 메소드 - 인터페이스
   R - collect(Collector<T,A,R> collector) - Stream
  매개값인 collector은 어떤 요소를 어떤 컬렉션에 수집할 것인지를 결정한다.
  Collector의 타입 파라미터 T는 요소이고, A는 누적기(accumulator)이다. 그리고 R은 요소가 저장될 컬렉션이다.
  풀어서 해석하면 T 요소를 A 누적기가 R에 저장한다는 의미이다.

  Collector의 구현 객체는 다음과 같은 Collectors 클래스의 다양한 정적 메소드를 이용할 수 있다.
   Collector<T,?,List<T>> - toList() - T를 List에 저장
   Collector<T,?,Set<T>> - toSet() - T를 Set에 저장
   Collector<T,?,Collection<T>> - toCollection(Supplier<Collection<T>) - T를 Supplier가 제공한 Collection에 저장
   Collector<T,?,Map<K,U>> - toMap(Function<T,K> keyMapper, Function<T,U> valueMapper) - T를 K와 U로 매핑해서 K를 키로, U를 값으로 Map에 저장
   Collector<T,?,ConcurrentMap<K,U>> - toConcurrentMap(Function<T,K> keyMapper, Function<T,U> valueMapper) - T를 K와 U로 매핑해서 K를 키로, U를 값으로 ConcurrentMap에 저장
  리턴값인 Collector을 보면 A(누적기)가 ?로 되어 있는데 이것은 Collector가 R(컬렉션)에 T(요소)를 저장하는 방법을 알고 있어 A(누적기)가 필요 없기 때문이다.
  다음 코드는 전체 학생 중에서 남학생들만 필터링해서 별도의 List로 생성한다.
   1. Stream<Student> totalStream = totalList.stream();
   2. Stream<Student> maleStream = totalStream.fliter(s->s.getSet() == Student.Sex.MALE);
   3. Collector<Student, ?, List<Student>> collector = Collectors.toList();
   4. List<Student> maleList = maleStream.collect(collector);

  1. 전체학생 List에서 Stream을 얻는다. 2. 남학생만 필터링해서 Stream을 얻는다. 3. List에 Student를 수집하는 Collector를 얻는다.
  4. Stream에서 collect() 메소드로 Student를 수집해서 새로운 List를 얻는다.

  위 코드에서 변수를 생략하면 다음과 같다.
   List<Student> maleList = totalList.stream().filter(s->s.getSex() == Student.Sex.MALE).collect(Collectors.toList());

  다음 코드는 전체 학생 중에서 여학생들만 필터링해서 별도의 HashSet으로 생성한다.
   1. Stream<Student> totalStream = totalList.stream();
   2. Stream<Student> femaleStream = totalStream.filter(s->s.getSex() == Student.Sex.FEMALE);
   3. Supplier<HashSet<Student>> supplier = HashSet :: new;
   4. Collector<Student,?,HashSet<Student>> collector = Collectors.toCollection(supplier);
   5. Set<Student> femaleSet = femaleStream.collect(collector);

  3. 새로운 HashSet을 공급하는 Supplier를 얻는다. 4. Supplier가 공급하는 HashSet에 Student를 수집하는 Collector를 얻는다.
  5. Stream에서 collect() 메소드로 Student를 수집해서 새로운 HashSet을 얻는다.

  위 코드에서 변수를 생략하면 다음과같다.
   Set<Student> femaleSet = totalList.stream().filer(s->s.getSex() == Student.Sex.FEMALE).collect(Collectors.toCollection(HashSet :: new));
  (collectMethod 패키지 참조)

 사용자 정의 컨테이너에 수집하기
  List, Set, Map 과 같은 컬렉션이 아닌 사용자 정의 컨테이너 객체에 수집하는 방법 알이보기
  스트림은 요소들을 필터링, 매핑해서 사용자 정의 컨테이너 객체에 수집할 수 있도록 다음의 collect() 메소드를 추가적으로 제공한다.

  인터페이스 - 리턴타입 - 메소드
   Stream - R - collect(Supplier<R>, BiConsumer<R,? super T>, BiConsumer<R,R>)
   IntStream - R - collect(Supplier<R>, ObjIntConsumer<R>, BiConsumer<R,R>) // Long, Double 동일

  첫번째 Supplier는 요소들이 수집될 컨테이너 객체(R)를 생성하는 역할을 한다. 순차처리(싱글 스레드) 스트림에서는 단 한번 supllier가 실행되고 하나의 컨테이너 객체를 생성한다.
  병렬 처리(멀티 스레드) 스트림에서는 여러번 Supplier가 실행되고 스레드별로 여러 개의 컨테이너 객체를 생성한다. 하지만 최종적으로 하나의 컨테이너 객체로 결합된다.
  두번째 XXXConumser는 컨테이너 객체(R)에 요소(T)를 수집하는 역할을 한다. 스트림에서 요소를 컨테이너에 수집할 때마다 XXXConsumer가 실행된다.
  세번째 BiConsumer는 컨테이너 객체(R)을 결합하는 역할을 한다. 순차 처리 스트림에서는 호출되지 않고, 병렬 처리 스트림에서만 호출되어
  스레드별로 생성된 컨테이너 객체를 결합해서 최종 컨테이너 객체를 완성한다.

  리턴타입 R은 요소들이 최종 수집된 컨테이너 객체이다. 순차 처리 스트림에서는 리턴 객체가 첫번째 Supplier가 생성한 객체지만,
  병렬 처리 스트림에서는 최종 결합된 컨테이너 객체가 된다. 병렬처리는 다음절에서 하고 순차처리부터 하자.

  스트림에서 읽은 남학생을 MaleStudent에 수집하는 코드
   1. Stream<Student> totalStream = totalList.stream();
   2. Stream<Student> maleStream = totalStream.filter(s -> s.getSex() == Student.Sex.MALE);
   3. Supplier<MaleStudent> supplier = ()->new MaleStudent();
   4. BiConsumer<MaleStudent, Student> accumulator = (ms, s)->ms.accumulate(s);
   5. BiConsumer<MaleStudent, MaleStudent> combiner = (ms1, ms2)->ms1.combine(ms2);
   6. MaleStudent maleStudent = maleStream.collect(supplier, accumulator, combiner);

  1. 전체학생 List에서 Stream을 얻는다. 2. 남학생만 필터링해서 Stream을 얻는다. 3. MaleStudent를 공급하는 Supplier을 얻는다.
  4. MaleStudent와 Student를 매개값으로 받아서 MaleStudent의 accumulate() 메소드로 Student를 수집하는 BiConsumer를 얻는다.
  5. 두 개의 MaleStudent를 매개값으로 받아 combine() 메소드로 결합하는 BiConsumer를 얻는다.
  6. suplier가 제공하는 MaleStudent에 accumulator가 Student를 수집해서 최종 처리된 MaleStudent를 얻는다.

  여기서 combiner는 싱글스레드에서 사용되지 않는다. 변수를 생략하면 다음과 같다.
  MaleStudent maleStudent = totalList.stream().filter(s->s.getSex()==Student.Sex.MALE).collect(
  () -> new MaleStudent(), (r, t) ->r.accumulate(t), (r1, r2) -> r1.combine(r2));

  람다식을 메소드참조로 변경하면 더욱 간단한 다음 코드가 된다.
  MaleStudent maleStudent = totalList.stream().filter(s->s.getSex()==Student.Sex.MALE).collect(
  MaleStudent :: new, MaleStudent :: accumulate, MaleStudent :: combine);
  (userContainer 패키지 참조)

 요소를 그룹핑해서 수집
  collect() 메소드는 단순히 요소를 수집하는 기능 이외에 컬렉션의 요소들을 그룹핑해서 Map 객체를 생성하는 기능도 제공한다.
  collect()를 호출할 때 Collectors의 groupingBy() 또는 groupingByConcurrent()가 리턴하는 Collector를 매개값으로 대입하면 된다.
  groupingBy()는 스레드에 안전하지 않은 Map을 생성하지만 groupingByConcurrent()는 스레드에 안전한 ConcurrentMap을 생성한다.

   Collect<T,?,Map<K,List<T>>> - groupingBy(Function<T,K> classifier) - T를 K로 매핑하고 K키에 저장된 List에 T를 저장한 Map 생성 // ConcurrentMap 동일
   Collect<T,?,Map<K,D>> - groupingBy(Function<T,K> classifier, Collector<T,A,D> collector) - T를 K로 매핑하고 K키에 저장된 D객체에 T를 누적한 Map 생성 // ConcurrentMap 동일
   Collect<T,?,Map<K,D>> - groupingBy(Function<T,K> classifier, Supplier<Map<K,D>> mapFactory, Collector<T,A,D> collector)
  - T를 K로 매핑하고 Supplier가 제공하는 Map에서 K키에 저장된 D객체에 T를 누적 // ConcurrentMap 동일

  다음 코드는 학생들을 성별로 그룹핑하고 나서 같은 그룹에 속하는 학생 List를 생성한 후 성별을 키로, 학생 List를 값으로 갖는 Map을 생성한다.
   1. Stream<Student> totalStream = totalList.stream();
   2. Function<Student, Student.Sex> classifier = Student :: getSex;
   3. Collector<Student, ?, Map<Student.Sex, List<Student>>> collector = Collectors.groupingBy(classifier);
   4. Map<Student.Sex, List<student>> mapBySex = totalStream.collect(collector);

  1. 전체학생 List에서 Stream을 얻는다.
  2. Student를 Student.Sex로 매핑하는 Function을 얻는다.
  3. Student.Sex가 키가 되고 그룹핑된 List<Student>가 값인 Map을 생성하는 Collector를 얻는다.
  4. Stream의 collect() 메소드로 Student를 Student.Sex별로 그룹핑해서 Map을 얻는다.

  위 코드와 동일코드
  Map<Student.Sex, List<Student>> mapBySex = totalList.stream().collect(Collectors.groupingBy(Student :: getSex));

 다음 코드는 학생들을 거주 도시별로 그룹핑하고 나서 같은 그룹에 속하는 학생들의 이름 List를 생성한 후, 거주 도시를 키로 이름 List를 값으로 갖는 Map을 생성한다.
  1. Stream<Student> totalStream = totalList.stream();
  2. Function<Student, Student.City> classifier = Student::getCity;
  3. Function<Student, String> mapper = Student::getName;
  4. Collector<String, ?, List<String>> collector1 = Collectors.toList();
  5. Collector<Student, ?, List<string>> collector2 = Collectors.mapping(mapper, collector1);
  6. Collector<Student, ?, Map<Student.City, List<String>>> collector3 = Collectors.groupingBy(classifier, collector2);
  7. Map<Student.City, List<String>> mapByCity = totalStream.collect(collector3);

 1. 전체학생 List에서 Stream 얻는다.
 2. Student를 Student.City로 매핑하는 Function을 얻는다.
 3~5. Student의 이름을 List에 수집하는 Collector를 얻는다.
 3. Student를 이름으로 매핑하는 Function을 얻는다.
 4. 이름을 List에 수집하는 Collector를 얻는다.
 5. Collectors의 mapping() 메소드로 Student를 이름으로 매핑하고 이름을 List에 수집하는 Collector를 얻는다.
 6. Student.City가 키이고 그룹핑된 이름 List가 값인 Map을 생성하는 Collector를 얻는다.
 7. Stream의 collect() 메소드로 Student를 Student.City 별로 그룹핑해서 Map을 얻는다.

 위 코드와 동일코드
 Map<Student.City, List<String>> mapByCity = totalList.stream().
            collect(Collectors.groupingBy(Student::getCity, Collector.mapping(Student::getName, Collectors.toList()))
 (GroupingBy 패키지 참조)

 그룹핑 후 매핑 및 집계
  Collectors.groupingBy() 메소드는 그룹핑 후 매핑이나 집계를 할 수 있도록 두 번째 매개값으로 Collector를 가질 수 있다.
  이전 예제에서 그룹핑된 학생객체를 학생이름으로 매핑하기 위해 mapping() 메소드로 Collector를 얻었다.
  Collectors는 mapping() 메소드 이외에도 집계를 위한 다양한 Collector를 리턴하는 다음과 같은 메소드를 제공한다.

   Collector<T,?,R> - mapping(Function<T,U> mapper, Collector<U,A,R> collector) - T를 U로 매핑한 후 U를 R에 수집
   Collector<T,?,Double> - averagingDouble(ToDoubleFunction<T> mapper) - T를 Double로 매핑한 후 Double의 평균값을 산출
   Collector<T,?,Long> - counting() - T의 카운팅 수를 산출
   Collector<CharSequence,?,String> - joining(CharSequence delimiter) - CharSequence를 구분자(delimiter)로 연결한 String을 산출
   Collector<T,?,Optional<T> - maxBy(Comparator<T> comparator) - Comparator를 이용해서 최대 T를 산출 // Min도 동일
   Collector<T,?,Integer> - summingInt(ToIntFunction) - Int 타입의 합계 산출 // long, double 동일

  다음 코드는 성별로 그룹핑한 다음 같은 그룹에 속하는 학생들의 평균 점수를 구하고, 성별을 키로 평균 점수를 값으로 갖는 Map 생성
   1. Stream<Student> totalStream = totalList.stream();
   2. Function<Student, Student.Sex> classifier = Student :: getSex;
   3. ToDoubleFunction<Student> mapper = Student :: getScore;
   4. Collector<Student, ?, Double> collector1 = Collectors.averagingDouble(mapper);
   5. Collector<Student, ?, Map<Student.Sex, Double>> collector2 = Collectors.groupingBy(classifier, collector1);
   6. Map<Student.Sex, Double> mapBySex = totalStream.collect(collector2);

   1. 전체 학생 List에서 Stream을 얻는다.
   2. Student를 Student.Sex로 매핑하는 Function을 얻는다.
   3. Student를 점수로 매핑하는 ToDoubleFunction을 얻는다.
   4. 학생 점수의 평균을 산출하는 Collector을 얻는다.
   5. Student.Sex가 키이고, 평균 점수 Double이 값인 Map을 생성하는 Collector를 얻는다.
   6. Stream의 collect() 메소드로 Student를 Student.Sex별로 그룹핑해서 Map을 얻는다.

  위코드와 동일코드
   Map<Student.Sex, Double> mapBySex = totalList.stream().
                collect(Collectors.groupingBy(Student::getSex, Collectors.averagingDouble(Student::getScore)));
   (GroupingAndReduction 패키지 참조)

병렬 처리
 병렬 처리란 멀티 코어 CPU 환경에서 하나의 작업을 분할해서 각각의 코어가 병렬적으로 처리하는 것을 말하는데 병렬 처리의 목적은 작업 처리 시간을 줄이기 위한 것이다.
 자바 8부터 요소를 병렬 처리할 수 있도록 하기 위해 병렬 스트림을 제공하기 때문에 컬렉션의 전체 요소 처리 시간을 줄여준다.

 동시성과 병렬성1
  멀티 스레드는 동시성(Concurrency) 또는 병렬성(Parallelism)으로 실행되기 때문에 이 용어들에 대해 정확히 이해해야 한다.
  이 둘은 멀티스레드의 동작 방식이라는 점에서는 동일하지만 서로 다른 목적을 가지고 있다.
  동시성은 멀티 작업을 위해 멀티 스레드가 번갈아가며 실행하는 성질을 말하고,
  병렬성은 멀티 작업을 위해 멀티 코어를 이용해서 동시에 실행하는 성질을 말한다.
  싱글 코어 CPU를 이용한 멀티 작업은 병렬적으로 실행되는 것처럼 보이지만 번갈아가며 실행하는 동시성 작업이다.
  병렬성은 데이터 병렬성과 작업 병렬성으로 구분할 수 있다.

  데이터 병렬성
   데이터 병렬성은 전체 데이터를 쪼개어 서브 데이터들로 만들고 이 서브 데이터들을 병렬처리해서 작업을 빨리 끝내는 것을 말한다.
   자바 8에서 지원하는 병렬 스트림은 데이터 병렬성을 구현한 것이다. 멀티 코어의 수만큼 대용량 요소를 서브 요소들로 나누고,
   각각의 서브 요소들을 분리된 스레드에서 병렬 처리시킨다.

  작업 병렬성
   작업 병렬성은 서로 다른 작업을 병렬 처리하는 것을 말한다. 작업 병렬성의 대표적인 예는 웹 서버이다.
   웹 서버는 각각의 브라우저에서 요청한 내용을 개별 스레드에서 병렬로 처리한다.

 포크조인 프레임워크
  병렬 스트림은 요소들을 병렬 처리하기 위해 포크조인 프레임워크를 사용한다. 병렬 스트림을 이용하면 런타임 시에 포크조인 프레임워크가 동작하는데,
  포크 단계에서는 전체 데이터를 서브 데이터로 분리한다. 그리고 서브 데이터를 멀티 코어에서 병렬로 처리한다.
  조인 단계에서는 서브 결과를 결합해서 최종 결과를 만들어 낸다.
  예를 들어 쿼드 코어 CPU에서 병렬 스트림으로 작업을 처리할 경우, 스트림의 요소를 N개라고 보았을 때 포크 단계에서는 전체 요소를 4등분한다.
  그리고 1등분씩 개별 코어에서 처리하고 조인 단계에서는 3번의 결합과정을 거쳐 최종 결과를 산출한다.
  병렬 처리 스트림은 실제로 포크단계에서 차례대로 요소를 4등분하지 않는다. 실제로는 내부적으로 서브 요소를 나누는 알고리즘이 있다.
  포코조인 프레임워크는 포크와 조인 기능 이외에 스레드풀인 ForkJoinPool을 제공한다.
  각각의 코어에서 서브 요소를 처리하는 것은 개별 스레드가 해야 하므로 스레드 관리가 필요하다.
  포크조인 프레임워크는 ExecutorService의 구현 객체인 ForkJoinPool을 사용해서 작업 스레드를 관리한다.

 병렬 스트림 생성
  병렬 처리를 위해 코드에서 포크조인 프레임워크를 직접 사용할 수 있지만, 병렬 스트림을 이용할 경우에는 백그라운드에서 포크조인 프레임 워크가 사용되기 때문에
  개발자는 매우 쉽게 병렬처리를 할 수 있다. 병렬 스트림은 다음 두가지 메소드로 얻을 수 있다.

  인터페이스 - 리턴 타입 - 메소드
   java.util.Collection - Stream - parallelStream()
   java.util.Stream.Stream - Stream - parallel() // Int, Long, Double 동일

  parallelStream() 메소드는 컬렉션으로부터 병렬 스트림을 바로 리턴한다.
  parallel() 메소드는 순차 처리 스트림을 병렬 처리 스트림으로 변환해서 리턴한다.
  어떤 방법으로 병렬 스트림을 얻더라도 이후 요소 처리 과정은 병렬 처리된다. 내부적으로 전체 요소를 서브요소들로 나누고, 이 서브 요소들을 개별 스레드가 처리한다.
  서브 처리 결과가 나오면 결합해서 마지막으로 최종처리결과를 리턴한다. 내부적인 동작을 확인하기위해 사용자 정의 컨테이너에 수집하기에서 본 예제를 병렬 스트림으로 수정해보자.
  다음은 수정 전의 코드이다.
   MaleStudent maleStudent = totalList.stream().filter(s->s.getSex() == Student.Sex.MALE)
             .collect(MaleStudent :: new, MaleStudent :: accumulate, MaleStudent :: combine);
  전체 학생 목록에서 stream() 메소드로 순차처리 스트림을 얻었기 때문에 MaleStudent 객체는 하나만 생성되고 남학생을 MaleStudent에 수집하기 위해 accumulate()가 호출된다.
  combine() 메소드는 전혀 호출되지 않았는데, 그 이유는 순차 처리 스트림이므로 결합할 서브 작업이 없기 때문이다.

  이 코드를 병렬처리 스트림으로 변경하면 다음과 같다.
   MaleStudent maleStudent = totalList.parallelStream().filter(s->s.getSex() == Student.Sex.MALE)
             .collect(MaleStudent :: new, MaleStudent :: accumulate, MaleStudent :: combine);
  단순히 stream() 메소드 호출이 parallelStream() 메소드 호출로 변경되었지만 내부 동작은 다음과 같은 순서로 전혀 다르게 진행된다.
   1. 쿼드 코어 CPU에서 실행된다면 전체 요소는 4개의 서브 요소로 나눠지고, 4개의 스레드가 병렬처리한다.
    각 스레드는 서브요소를 수집해야하므로 4개의 MaleStudent 객체를 생성하기 위해 collect()의 첫 번째 메소드 참조인 MaleStudent :: new 를 4번 실행시킨다.
   2. 각 스레드는 MaleStudent 객체에 남학생 요소를 수집하기 위해 두 번째 메솓드 참조인 MaleStudent :: accumulate 를 매번 실행시킨다.
   3. 수집이 완료된 4개의 MaleStudent는 3번의 결합으로 최종 MaleStudent가 만들어질 수 있으므로 세 번째 메소드 참조인 MaleStudent :: combine 이 3번 실행된다.

 병렬 처리 성능
  스트림 병렬처리가 스트림 순차처리보다 항상 실행 성능이 좋다고 판단해서는 안된다.
  병렬 처리에 영향을 미치는 다음 3가지 요인을 잘 살펴보아야 한다.

  1. 요소의 수와 요소당 처리 시간
   컬렉션에 요소의 수가 적고 요소당 처리 시간이 짧으면 순차처리가 오히려 병렬처리보다 빠를 수 있다.
   병렬 처리는 스레풀의 생성, 스레드 생성이라는 추가적인 비용이 발생하기 때문이다0.
  2. 스트림 소스의 종류
   ArrayList, 배열은 인덱스로 요소를 관리하기 때문에 포크 단계에서 요소를 쉽게 분리할 수 있어 병렬 처리 시간이 절약된다.
   반면 HashSet, TreeSet은 요소분리가 쉽지 않고, LinkedList 역시 링크를 따라가야 하므로 요소 분리가 쉽지 않다.
   따라서 이 소스들은 상대적으로 병렬 처리가 늦다.
  3. 코어의 수
   싱글 코어 cpu일 경우에는 순차 처리가 빠르다. 병렬 스트림을 사용할 경우 스레드의 수만 증가하고 동시성 작업으로 처리되기 때문에 좋지 못한 결과를 준다.
   코어의 수가 많으면 많을수록 병렬작업 처리속도는 빨라진다.
