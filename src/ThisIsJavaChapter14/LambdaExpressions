자바는 함수적 프로그래밍을 위해 자바 8부터 람다식을 지원하면서 기존의 코드 패턴이 많이 달라졌다.
람다식은 수학자 알론조 처치가 발표한 람다 계산법에서 사용된 식으로, 그의 제자 존 매카시가 프로그래밍 언어에 도입했다.
람다식은 익명함수를 생성하기 위한 식으로 객체지향 언어보다는 함수지향 언어에 가깝다.
자바에서 람다식을 수용한 이유는 자바 코드가 매우 간결해지고, 컬렉션의 요소를 필터링하거나 매핑해서 원하는 결과를 쉽게 집계할 수 있기 때문이다.
람다식의 형태는 매개 변수를 가진 코드 블록이지만 런타임 시에는 익명 구현 객체를 생성한다.
예를 들어 Runnable 인터페이스의 익명 구현 객체를 생성하는 코드를 람다식으로 표현하면 다음과같다.
Runnable runnable = () -> {};
람다식은 "(매개변수) -> {실행코드}" 형태로 작성되는데 마치 함수 정의형태를 띠고 있지만 런타임시에 인터페이스의 익명구현객체로 생성된다.

람다식 기본 문법
 (타입 매개변수) -> {실행문; }
 타입 매개변수는 중괄호 블록을 실행하기 위해 필요한 값을 제공하는 역할을 한다.
 -> 기호는 매개변수를 이용해서 중괄호를 실행한다는 뜻으로 해석하면 된다.
 예를들어 int 매개 변수 a의 값을 콘솔에 출력하기 위해 다음과 같이 람다식을 작성할 수 있다.
 (a) -> { System.out.println(a); }
 하나의 매개변수만 있다면 ()를 생략할 수 있고, 하나의 실행문만 있다면 {}를 생략할 수 있다.
 만약 매개변수가 없다면 람다식에서 매개 변수 자리가 없어지므로 빈괄호() 를 반드시 사용해야한다.
 {}를 실행하고 결과값을 리턴해야한다면 return문으로 결과값을 저장할 수 있으며
 중괄호에 return문만 있을 경우 return문을 작성하지않는것이 정석이다
 (x, y) -> x + y

타겟 타입과 함수적 인터페이스
 람다식의 형태는 매개 변수를 가진 코드 블록이기 때문에 마치 자바의 메소드를 선언하는 것처럼 보여진다.
 자바는 메소드를 단독으로 선언할 수 없고 항상 클래스의 구성 멤버로 선언하기 때문에 람다식은 단순히 메소드를 선언하는 것이 아니라
 이 메소드를 가지고 있는 객체를 생성해 낸다. 그럼 어떤 타입의 객체를 생성할까?
 인터페이스 변수 = 람다식;
 람다식은 인터페이스 변수에 대입된다. 이 말은 람다식은 인테퍼이스의 익명 구현 객체를 생성한다는 뜻이 된다.
 인터페이스는 직접 객체화할 수 없기 때문에 구현 클래스가 필요한데, 람다식은 익명 구현 클래스를 생성하고 객체화한다.
 람다식은 대입될 인터페이스의 종류에 따라 작성방법이 달라지기때문에 람다식이 대입될 인터페이스를 람다식의 타겟 타입이라고한다.

 함수적 인터페이스(@FunctionalInterface)
  모든 인터페이스를 람다식의 타겟타입으로 사용할 수는 없다. 람다식이 하나의 메소드를 정의하기 때문에 두개이상의 추상 메소드가 선언된
  인터페이스는 람다식을 이용해서 구현 객체를 생성할 수 없다. 하나의 추상메소드가 선언된 인터페이스만이 람다식의 타겟이 될 수 있는데
  이러한 인터페스를 함수적 인터페이스라고 한다. 함수적 인터페이스를 작성할 때 두 개 이상의 추상 메소드가 선언되지 않도록 컴파일러가
  체킹해주는 기능이 있는데 바로 인터페이스 선언 시 @FunctionalInterface 어노테이션을 붙이면 된다.

 매개 변수와 리턴값이 없는 람다식
  매개변수와 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스가 있다고 가정해보자.
  public interface FunctionalInterface{
    public void method();
  }
  이 인터페이스를 타겟타입으로 갖는 람다식은 아래와 같다. 람다식에서 매개변수가 없는 이유는 method()가 매개변수를 갖지 않기 때문이다.
  MyFunctionalInterface fi = () -> {..}
  람다식이 대입된 인터페이스의 참조 변수는 다음과 같이 method()를 호출할 수 있다. method()호출은 람다식의 중괄호{}를 실행시킨다.
  fi.method();

 매개 변수가 있는 람다식
  아래와 같이 매개 변수가 있고 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스가 있다고 가정
  public interface FunctionalInterface{
    public void method(int x);
  }