자바에서 제공하는 API(Application Programming Interface)를 배우는 챕터이다.
API는 라이브러리(library)라고 부르기도 하는데, 프로그램 개발에 자주 사용되는 클래스 및 인터페이스 모음을 말한다.
지금까지 사용했던 String 클래스와 System 클래스 모두 API에 속하는 클래스들이다.

API 도큐먼트는 쉽게 API를 찾아 이용할 수 있도록 문서화한 것을 말한다.
http://docs.oracle.com/javase/8/docs/api/

Object 클래스

 객체 비교(equals())
  public boolean equals(Object obj){}
  equals()메소드의 매개타입은 Object인데, 이것은 모든 객체가 매개값으로 대입될 수 있음을 말한다.
  그 이유는 Object가 최상위 타입이므로 모든 객체는 Object타입으로 자동 타입변환될 수 있기 때문이다.
  자바에서는 두 객체를 동등 비교할 때 이 메소드를 흔히 사용한다.
  이 메소드는 두 객체를 비교해서 논리적으로 동등하면 true를 리턴하고, 그렇지 않으면 false를 리턴한다.
  논리적으로 동등하다는 것은 같은 객체이건 다른 객체이건 상관없이 객체가 저장하고 있는 데이터가 동일함을 뜻한다.
  Object의 equals() 메소드는 직접 사용되지 않고 하위 클래스에서 재정의하여 논리적으로 동등비교할 때 이용된다.

 객체 해시코드(hashCode())
  객체 해시코드란 객체를 식별할 하나의 정수값을 말한다.
  Object의 hashCode() 메소드는 객체의 메모리 번지를 이용해서 해시코드를 만들어 리턴하기 때문에 객체마다 다른 값을 가지고 있다.
  논리적 동등 비교 시 hashCode()를 오버라이딩할 필요성이 있는데 컬렉션 프레임워크에서
  HashSet, HashMap, Hashtable 은 다음과 같은 방법으로 두 객체가 동등한지 비교한다.
  1. 우선 hashCode() 메소드를 실행해서 리턴된 해시코드 값이 같은지를 본다.
  2. 해시코드 값이 다르면 다른객체로 판단하고 해시코드 값이 같으면 equals() 메소드로 다시 비교한다.
  3. hashCode() 메소드가 true가 나와도 equals() 의 리턴값이 다르면 다른 객체가 된다.
  결론적으로 객체의 동등 비교를 위해서는 Object의 equals() 메소드만 재정의하지 말고 hashCode() 메소드도 재정의해서
  논리적 동등 객체일 경우 동일한 해시코드가 리턴되도록 해야한다.

 객체 문자정보(toString())
  Object 클래스의 toString() 메소드는 객체의 문자 정보를 리턴한다.
  객체의 문자 정보란 객체를 문자열로 표현한 값이다.
  기본적으로 Object 클래스의 toString() 메소드는 "클래스명@16진수해시코드"로 구성된 문자 정보를 리턴한다.
  이 메소드의 리턴값은 자바 애플리케이션에서는 별 값어치가 없는 정보이므로 Object 하위 클래스는 toString() 메소드를 재정의하여
  간결하고 유익한 정보를 리턴하도록 되어있다.

객체 복제(clone())
 객체 복제는 원본 객체의 필드값과 동일한 값을 가지는 새로운 객체를 생성하는 것을 말한다.
 객체를 복제하는 이유는 원본 객체를 안전하게 보호하기 위해서이다. 신뢰하지 않는 영역으로 원본 객체를 넘겨 작업을 할 경우
 원본 객체의 데이터가 훼손될 수 있기 때문에  복제된 객체를 만들어 작업한다.
 객체를 복제하는 방법에는 얕은 복제와 깊은 복제가 있다.

 얕은 복제(thin clone)
  얕은 복제란 단순히 필드값을 복사해서 객체를 복제하는 것을 말한다.
  필드값만 복제하기 때문에 필드가 기본 타입일 경우 값 복사가 일어나고, 필드가 참조 타입일 경우에는 객체의 번지가 복사된다.
  이 메소드로 객체를 복제하려면 원본 객체는 반드시 java.lang.Cloneable 인터페이스를 구현하고 있어야 한다.
  메소드 선언이 없음에도 불구하고 Cloneable 인터페이스를 명시적으로 구현하는 이유는
  클래스 설계자가 복제를 허용한다는 의도적인 표시를 위해서이다.
  클래스 설계자가 복제를 허용하지 않는다면 Clonealbe 인터페이스를 구현하지 않으면 된다. 구현하지 않으면 clone() 메소드를 호출할 때
  CloneNotSupportedException 예외가 발생하여 복제가 실패된다.

 깊은 복제(deep clone)
  얇은 복제의 경우 참조타입 필드는번지만 복제되기 때문에 원본객체의 복제 객체의 필드는 같은 객체를 참조하게 된다.
  만약 복제 객체에서 참조객체를 변경하면 원본객체도 변경된 객체를 가지게 된다. 이것이 얇은 복제의 단점이다.
  깊은 복제란 참조하고 있는 객체도 복제하는 것을 말한다.
  깊은 복제를 하려면 Object의 clone() 메소드를 재정의해서 참조객체를 복제하는 코드를 직접 작성해야 한다.

 객체 소멸자(finalize())
  참조하지 않는 배열이나 객체는 쓰레기 수집기(Garbage Collector)가 힙 영역에서 자동적으로 소멸시킨다.
  쓰레기 수집기는 객체를 소멸하기 직전에 마지막으로 객체의 소멸자(finalize())을 실행시킨다.
  소멸자는 Object의 finalize()메소드를 말하는데 기본적으로 실행 내용이 없다.
  만약 객체가 소멸되기 전에 마지막으로 사용했던 자원(데이터 연결, 파일 등)을 닫고 싶거나,
  중요한 데이터를 저장하고 싶다면 Object의 fianlize()를 재정의할 수 있다.

Objects 클래스
 java.util.Objects 클래스는 객체비교, 해시코드생성, null여부, 객체문자열리턴 등의 연산을 수행하는 정적 메소드들로 구성된
 Object의 유틸리티 클래스이다.

 객체 비교(compare(T a, T b, Comparator<T>c))
  Objects.compare(T a, T b, Comparator<T>c) 메소드는 두 객체를 비교자(Comparator)로 비교해서 int 값을 리턴한다.
  java.util.Comparator<T>는 제네릭 인터페이스 타입으로 두 객체를 비교하는 compare(T a, T b) 메소드가 정의되어 있다.
  compare() 메소드의 리턴 타입은 int인데, a가 b보다 작으면 음수, 같으면 0, 크면 양수를 리턴하도록 구현 클래스를 만들어야 한다.
  public interface Comparator<T>{
    int compare(T a, T b)
  }

 동등 비교(equals()와 deepEquals())
  Objects.equals(Object a, Object b)는 두 객체의 동등을 비교하는데 다음과 같은 결과를 리턴한다.
  1. a = not null, b = not null  -> a.equals(b)의 리턴값
  2. a = null, b = not null  -> false
  3. a = not null, b = null  -> false
  4. a = null, b = null  -> true
  특이한 점은 a, b 모두 null일 경우 true를 리턴한다는 점이다.

  Objects.deepEquals(Object a, Object b) 역시 두 객체의 동등을 비교하는데 a와 b가 서로 다른 배열일 경우,
  항목 값이 모두 같다면 true를 리턴한다.
  1. a = not null(not array), b = not null(not array)  -> a.equals(b)의 리턴값
  2. a = not null(array), b = not null(array)  -> Arrays.deepEquals(a,b)의 리턴값
  3. a = null, b = not null  -> false
  4. a = not null, b = null  -> false
  5. a = null, b = null  -> true

 해시코드 생성(hash(), hashCode())
  Objects.hash(Object ... values) 메소드는 매개값으로 주어진 값들을 이용해서 해시 코드를 생성하는 역할을 하는데,
  주어진 매개값들로 배열을 생성하고 Arrays.hashCode(Object[])를 호출해서 해시코드를 얻고 이 값을 리턴한다.
  이 메소드는 클래스가 hashCode()를 재정의할 때 리턴값을 생성하기 위해 사용하면 좋다.
  클래스가 여러 가지 필드를 가지고 있을 때 이 필드들로부터 해시코드를 생성하게 되면 동일한 필드값을 가지는 객체는
  동일한 해시코드를 가질 수 있다.
  public int hashCode(){
    return Objects.hash(field1, field2, field3);
  }
  Objects.hashCode(Object o)는 매개값으로 주어진 객체의 해시코드를 리턴하기 때문에
  o.hashCode()의 리턴값과 동일하다. 차이점은 매개값이 null이면 0을 리턴한다.

 Null여부 조사(isNull(), nonNull(), requireNonNull())
  Objects.isNull(Object obj)는 매개값이 null일 경우 true를 리턴한다.
  반대로 nonNull(Object obj)는 매개값이 not null일 경우 true를 리턴한다.
  requireNonNull()는 다음 세가지로 오버로딩 되어있다.
  1. requireNonNull(T obj)
   1) not null -> obj
   2) null -> NullPointerException
  2. requireNonNull(T obj, String message)
   1) not null -> obj
   2) null -> NullPointerException(message)
  3. requireNonNull(T obj, Supplier<String> msgSupplier)
   1) not null -> obj
   2) null -> NullPointerException(msgSupplier.get())

 객체 문자 정보(toString())
  Objects.toString()은 객체의 문자 정보를 리턴하는데, 두가지로 오버로딩되어 있다.
   1. 리턴타입: String, 메소드: toString(Object o)
    1) not null -> o.toString()
    2) null -> "null"
   2. 리턴타입: String, 메소드: toString(Object o, String nullDefault)
    1) not null -> o.toString()
    2) null -> nullDefault

System 클래스
 자바 프로그램은 운영체제상에서 바로 실행되는 것이 아니라 JVM 위에서 실행된다.
 따라서 운영체제의 모든 기능을 자바 코드로 직접 접근하는건 어렵지만 java.lang 패키지의 System 클래스를 이용하여 운영체제의 일부기능을
 사용할 수 있다. System 클래스의 모든 필드와 메소드는 정적(static) 필드와 정적 메소드로 구성되어 있다.

 프로그램 종료(exit())
  경우에 따라서는 강제적으로 JVM을 종료시킬 때도 있다. 이때 이 메소드를 사용하면 된다.
  exit()은 현재 실행하고 있고 프로세스를 강제 종료시키는 역할을 한다.
  exit() 메소드는 int 매개값을 지정하도록 되어 있는데 이 값을 종료 상태값이라 한다.
  일반적으로 정상종료인 경우 0으로 지정하고 비정상종료일 경우 0이외의 값을 준다.
  만약 특정 값이 입력되었을 경우에만 종료하고 싶다면 자바의 보안 관리자를 직접 설정해서 종료 상태값을 확인하면 된다.
  System.exit()가 실행되면 보안 관리자의 checkExit() 메소드가 자동호출되는데 이 메소드에서 종료 상태값을 조사해서
  특정 값이 입력되지 않으면 SecurityException을 발생시켜 System.exit()를 호출한 곳에서 예외처리를 할 수 있도록 해준다.
  checkExit()가 정상적으로 실행되면 JVM은 종료 된다.

 쓰레기 수집기 실행(gc())
  자바는 개발자가 메모리를 직접 코드로 관리하지 않고  JVM이 알아서 자동으로 관리한다.
  JVM은 메모리가 부족할 때와 CPU가 한가할 때에 쓰레기 수집기를 실행시켜 사용하지 않는 객체를 자동 제거한다.
  Car car = new Car();
  여기 car에 null을 대입하면 car는 객체의 번지를 잃게된다. 객체의 번지를 모르니 더이상 Car 객체는 사용할 수가 없고 쓰레기가 된다.
  Car car = new Car(); //이전 참조객체
  car = new Car(); //현재 참조객체
  변수 car가 다른 Car 객체를 참조할 경우도 마찬가지다. 이전 객체의 번지를 잃기때문에 이전 객체는 쓰레기가 된다.
  쓰레기 수집기는 개발자가 직접 코드로 실행시킬 수 없고 JVM에게 가능한한 빨리 실행해달라고 요청할 수 있다.
  이것이 System.gc() 메소드이다.

 현재시간읽기(currentTimeMillis(), nanoTime())
  컴퓨터로의 시계로부터 현재시간을 읽어서 밀리세컨드(1/1000초) 단위와 나노세컨드(1/10의9승초) 단위의 long 값을 리턴한다.
  보통 프로그램의 실행소요 시간 측정에 사용된다.

 시스템 프로터티 읽기(getProperty())
  JVM이 시작할 때 자동 설정되는 시스템의 속성값을 말한다.
  System.getProperty(String key);
  이 메소드를 이용하면 되는데 이 메소드는 시스템 프로퍼티의 키 이름을 매개값으로 받고 해당 키에 대한 값을 문자열로 리턴한다.

 환경변수 읽기(getfenv())
  대부분의 운영체제는 실행되는 프로그램들에게 유용한 젱보를 제공할 목저긍로 환경변수를 제공한다.
  환경변수는 프로그램상의 변수가 아니라 운영체제에서 이름(Name)과 값(Value)으로 관리되는 문자열 정보다.
  System.getenv(String name);

Class 클래스
 자바는 클래스와 인터페이스의 메타데이터를 java.lang 패키지에 소속된 Class 클래스로 관리한다.
 여기서 메타 데이터란 클래스의 이름, 생성자 정보, 필드 정보, 메소드 정보를 말한다.

 Class 객체 얻기(getClass(), forName())
  프로그램에서 Class 객체를 얻기 위해서는 Object 클래스가 가지고 있는 getClass() 메소드를 이용하면 된다.
  Object는 모든 클래스의 최상위 클래스이므로 모든 클래스에서 getClass() 메소드를 호출할 수 있다.
  Class clazz = obj.getClass();
  getClass() 메소드는 해당 클래스로 객체를 생성했을 때만 사용할 수 있는데, 객체를 생성하기 전에 직접 Class객체를 얻을 수도있다.
  Class는 생성자를 감추고  있기 때문에 new 연산자로 객체를 만들 수 없고, 정적 메소드인 forName()을 이용해야한다.
  forName() 메소드는 클래스 전체이름을 매개값으로 받고 Class객체를 리턴한다.
  try{
    Class clazz = Class.forName(String className);
  }catch(ClassNotFoundException e{
  }
  Class.forName() 메소드는 매개값으로 주어진 클래스를 찾지 못하면 예외를 발생시키기 때문에 예외처리가 필요하다.

 리플렉션(getDeclaredConstructors(), getDeclaredFields(), getDeclaredMethods())
  Class 객체를 이용하면 클래스의 생성자, 필드, 메소드 정보를 알아낼 수 있다.
  이것을 리플렉션(Reflection)이라고 한다. Class객체는 리플렉션을 위해 위 3가지 메소드를 제공한다.
  메소드 이름에서 알 수 있듯이 세 메소드는 각각 Constructor 배열, Field 배열, Method 배열을 리턴한다.
  getDeclaredFields(), getDeclaredMethods()는 클래스에서 선언된 멤버만 가져오고 상속된 멤버는 가져오지 않는다.
  만약 상속된 멤버도 얻고 싶다면 getFields(), getMethods()를 이용해야 한다.
  단 getFields(), getMethods()는 public 멤버만 가져온다.

 동적 객체 생성(newInstance())
  Class객체를 이용하면 new연산자를 사용하지 않아도 동적으로 객체를 생성할 수 있다.
  이 방법은 코드 작성 시에 클래스 이름을 결정할 수 없고, 런타임 시에 클래스 이름이 결정되는 경우에 매우 유용하게 사용된다.
  Class.forName() 메소드로 Class객체를 얻은 다음 newInstance() 메소드를 호출하면 Object 타입의 객체를 얻을 수 있다.
  try{
    Class clazz = Class.forName("런타임 시 결정되는 클래스이름")
    Object obj = clazz.newInstance();
  }catch(ClassNotFoundException e){
  }catch(InstantiationException e){
  }catch(IllegalAccessException e){
  }
  newInstance() 메소드는 기본 생성자를 호출해서 객체를 생성하기 때문에 반드시 클래스에 기본생성자가 존재해야 한다.
  만약 매개 변수가 있는 생성자를 호출하고 싶으면 리플렉션으로 Constructor 객체를 얻어 newInstance() 메소드를 호출하면 된다.
  newInstance() 메소드는 두가지 예외가 발생할 수 있는데 InstantiationException 예외는 해당 클래스가 추상클래스이거나
  인터페이스일 경우에 발생하고 IllegalAccessException 예외는 클래스나 생성자가 접근제한자로 인해 접근할 수 없을 경우에 발생한다.
  newInstance() 메소드의 리턴 타입은 Object이므로 이것을 원래 클래스 타입으로 변환해야만 메소드를 사용할 수 있다.
  그렇게 하기 위해서는 강제 타입변환을 해야하는데 클래스 타입을 모르는 상태이므로 변환을 할 수가 없다.
  이 문제를 해결하려면 인터페이스 사용이 필요하다.
  인터페이스 Action을 구현하는 구현클래스  SendAction 이있다면
  Class clazz = Class.forName("SendAction");
  Action action = (Action) clazz.newInstance();
  action.execute(); // SendAction의 execute()가 실행됨
  Class.forName()의 매개값으로 SendAction을 주면 Class객체가 만들어 지고
  Class 객체의 newInstance() 메소드로 Object 객체를 얻을 수 있다.
  얻어진 객체는 모두 Action 인터페이스를 구현하고있기때문에 Action 인터페이스 타입으로 변환이 가능하다.

String 클래스
 문자열을 생성하는방법과 추출, 비교, 찾기, 분리, 변환 등을 제공하는 메소드들이 있다.

 String 생성자
  자바의 문자열은 jajva.lang 패키지의 String 클래스의 인스턴스로 관리된다.
  소스상에서 문자열 리터럴은 String 객체로 자동 생성되지만 String 클래스의 다양한 생성자를 이용해서 직접 객체를 생성할수도있다.

 String 메소드
  문자추출(charAt())
   charAt()메소드는 매개값으로 주어진 인덱스의 문자를 리턴한다.
   인덱스는 0에서 부터 문자열의길이-1까지의 번호가 있다.

  문자열비교(equals())
   기본타입(byte, char, short, int, long, float, double, boolean) 변수의 값을 비교할 때에는 == 연산자를 사용한다.
   그러나 문자열을 비교할때는 ==연산자를 사용하면 원하지 않는 결과가 나올수있다.
   String str1 = new String("가");
   String str2 = "가";
   String str3 = "가";
   여기서 str2와 str3는 동일한 String 객체를 참조한다. 그러나 str1는 new 연산자로 생성된 다른 String 객체를 참조한다.
   str2 == str3  -> true, str1 == str2  -> false
   만약 두 String 객체의 문자열만을 비교하고 싶다면 == 대신 equals() 메소드를 사용해야 한다.
   str1.equals(str2)  -> true
   원래 equals()는 Object의 번지 비교 메소드지만 String 클래스가 오버라이딩해서 문자열을 비교하도록 변경하였다.

  바이트 배열로 변환(getBytes())
   종종 문자열을 바이트 배열로 변환하는 경우가 있다.
   대표적으로 네트워크로 문자열을 전송하거나, 문자열을 암호화할때 문자열을 바이트 배열로 변환한다.
   문자열을 바이트 배열로 변환하는 메소드는 두가지이다.
   byte[] bytes = "문자열".getBytes();
   byte[] bytes = "문자열".getBytes(Charset charset);
   getByte()메소드는 시스템의 기본 문자셋으로 인코딩된 바이트 배열을 리턴한다.
   만약 특정 문자셋으로 인코딩된 바이트배열을 얻으려면 두번째 메소드를 사용하면 된다.

  문자열 찾기(indexOf())
   indexOf() 메소드는 매개값으로 주어진 문자열이 시작되는 인덱스를 리턴한다.
   만약 주어진 문자열이 포함되어 있지 않으면 -1을 리턴한다.
   if문의 조건식에 특정문자열이 포함되어 있는지 여부에 따라 실행 코드를 달리할 때 자주 사용된다.

  문자열 길이(length())
   length() 메소드는 문자열의 길이(문자의 수)를 리턴한다.

  문자열 대치(replace())
   이 메소드는 첫 번째 매개값인 문자열을 찾아 두 번째 매개값인 문자여로 대치한 새로운 문자열을 생성하고 리턴한다.
   String 객체의 문자열은 변경이 불가한 특성이 있어 replace() 메소도가 리턴하는 문자열은 원래 문자열의 수정본이 아닌
   완전히 새로운 문자열이다.

  문자열 잘라내기(substring())
   주어진 인덱스에서 문자열을 추출한다. 이 메소드는 매개값의 수에 따라 두가지 형태로 사용된다.
   substring(int beginIndex, int endIndex)는 주어진 시작과 끝 인덱스 사이의 문자열을 추출하고
   substring(int beginIndex)는 주어진 인덱스 이후부터 끝까지 문자열을 추출한다.

  알파벳 소,대문자 변경(toLowerCase(), toUpperCase())
   toLowerCase()는 문자열을 모두 소문자로 바꾼 새로운 문자열을 생성 후 리턴한다.
   toUpperCase()는 문자열을 모두 대문자로 바꾼 새로운 문자열을 생성 후 리턴한다.

  문자열 앞뒤 공백잘라내기(trim())
   문자열의 앞뒤 공백을 제거한 새로운 문자열을 생성 후 리턴한다. 중간의 공백은 제거하지 않는다.

  문자열 변환(valueOf())
   기본 타입의 값을 문자열로 변환하는 기능을 가지고 있다.

StringTokenizer 클래스
 문자열이 특정 구분자로 연결되어 있을 경우 구분자를 기준으로 부분 문자열을 분리하기 위해서는 String의 split()메소드를 이용하거나
 java.util 의 StringTokenizer 클래스를 이용할 수 있다.
 split()은 정규 표현식으로 구분하고 StringTokenizer 문자로 구분한다는 차이가 있다.

 split() 메소드
  String 클래스의 split() 메소드는 정규 표현식을 구분자로 해서 문자열을 분리한 후 배열에 저장하고 리턴한다.
  String[] result = "문자열".split("정규표현식");

 StringTokenizer 클래스
  문자열이 한 종류의 구분자로 연결되어 있을 경우 이 클래스를 사용하면 손쉽게 문자열을 분리해 낼 수 있다.
  StringTokenizer 객체를 생성할 때 첫 번째 매개값으로 전체 문자열을 주고 두분째 매개값으로 구분자를 주면 된다.
  StringTokenizer st = new StringTokenizer("문자열", "구분자");
  만약 구분자를 생략하면 공백(space)이 기본 구분자가 된다.
  nextToken() 메소드로 토큰을 하나 꺼내오면 StringTokenizer 객체에는 해당 토큰이 없어진다.
  만약 StringTokenizer 객체에 더이상 가져올 토큰이 없다면 nextToken() 메소드는 java.util.NoSuchElementException 예외를 발생시킨다.
  그래서 nextToken()을 사용하기 전에 hasMoreTokens() 메소드로 꺼내올 토큰이 있는지 조사 후에 nextToken()을 호출하는 것이 좋은 방법이다.

 StringBuffer, StringBuilder 클래스
  문자열을 저장하는 String은 내부의 문자열을 수정할 수 없다.
  예를 들어 String의 replace() 메소드는 내부의 문자를 대치하는것이 아니라 대치된 새로운 문자열을 리턴한다.
  String 객체를 + 연산할 경우도 새로운 객체가 생성된다.
  문자열을 결합하는 + 연산자를 많이 사용하면 할수록 그만큼 객체의 수가 늘어나기 때문에 프로그램 성능을 느리게 하는 원인이 된다.
  문자열을 변경하는 작업이 많을 경우에는 String 클래스보단 StringBuffer 나 StringBuilder 클래스를 사용하는것이 좋다.
  이 두 클래스는 내부 버퍼(데이터를 임시로 저장하는메모리)에 문자열을 저장해 두고 그안에서 추가, 수정, 삭제 작업을 할 수 있도록 되어있다.
  두 클래스의 사용방법은 동일한데 차이점은 StringBuffer는 멀티스레드 환경에서만 사용하도록 설계되어 있다.
  StringBuilder 클래스는 몇가지 생성자를 제공하고 있는데 기본 생성자는 16개의 문자들을 저장할 수 있는 초기 버퍼를 만든다.
  StringBuilder(int capacity) 생성자는 capacity로 주어진 개수만큼 문자들을 저장할 수 있는 초기 버퍼를 만든다.
  StringBuilder는 버퍼가 부족할 경우 자동으로 버퍼 크기를 늘리기 때문에 초기 버퍼의 크기는 그다지 중요하지 않다.
  StringBuilder sb = new StringBuilder();

정규표현식과 Pattern 클래스
 문자열이 정해져 있는 형식(정규 표현식)으로 구성되어 있는지 검증해야 하는 경우가 있다.
 사용자가 정보를 입력했을때 제대로 입력했는지 검증해야 할 때 정규표현식과 비교한다.
 Patten 클래스는 문자열을 정규 표현식으로 검증하는 mathces()메소드를 제공한다.
 boolean result = Pattern.matches("정규식", "검증할 문자열");

Arrays 클래스
 Arrays 클래스는 배열 조작 기능을 가지고 있다. 배열 조작이란 배열의 복사, 항목 정렬, 항목 검색과 같은 기능을 말한다.
 단순한 배열복사는 System.arraycopy() 메소드를 사용할 수 있으나 Arrays는 추가적으로 항목 정렬, 항목 검색, 항목 비교와 같은 기능을 제공.
 Arrays클래스의 모든 메소드는 정적이므로 Arrays클래스로 바로 사용 가능하다.

 배열 복사
  배열 복사를 위해 사용할 수 있는 메소드는 copyOf(원본배열, 복사할길이), copyOfRange(원본배열, 시작인덱스, 끝인덱스)이다.
  copyOf() 메소드는 원본배열의 0번 인덱스에서 복사할 길이만큼 복사할 타켓 배열을 리턴하는데 복사할 길이는 원본 배열의 길이보다 커도되며
  타켓 배열의 길이가 된다.
  copyOfRange() 메소드는 원본 배열의 시작인덱스에서 끝인덱스까지 복사한 배열을 리턴한다.
  시작인덱스는 포함되지만 끝인덱스는 포함되지 않는다.

 배열항목 비교
  Arrays의 equals()와 deepEquals()는 배열 항목을 비교한다.
  equals()는 1차 항목의 값만 비교하고 deepEquals()는 중첩된 배열의 항목까지 비교한다.

 배열항목 정렬
  기본타입 또는 String배열은 Arrays.sort()메소드의 매개값으로 지정해주면 자동으로 오름차순 정렬이 된다.
  사용자 정의 클래스 타입일 경우에는 클래스가 Comparable 인터페이스를 구현하고 있어야 정렬이 된다.

 배열항목 검색
  배열항목에서 특정 값이 위치한 인덱스를 얻는 것을 배열 검색이라고 한다.
  배열 항목을 검색하려면 먼저 Arrays.sort()메소드로 항목들을 오름차순으로 정렬한 후, Arrays.binarySearch()메소드로 항목을 찾아야한다.

Wrapper(포장) 클래스
 자바는 기본 타입(byte, char, short, int, long, float, double, boolean)의 값을 갖는 객체를 생성할 수 있다.
 이런 객체를 포장객체라고 하는데 그 이유는 기본 타입의 값을 내부에 두고 포장하기 때문이다.
 포장객체의 특징은 포장하고 있는 기본 타입값은 외부에서 변경할 수 없다.
 내부의 값을 변경하고 싶다면 새로운 포장객체를 만들어야한다.
 포장클래스(Byte, Character, Short, Integer, Long, Float, Double,. Boolean)

 박싱과 언박싱
  기본타입의 값을 포장객체로 만드는 과정을 박싱이라하고 반대로 포장객체에서 기본타입의 값을 얻어내는 과정을 언박싱이라고 한다.

