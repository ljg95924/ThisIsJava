멀티 스레드 개념
 프로세스와 스레드
  운영체제에서는 실행 중인 하나의 애플리케이션을 프로세스라고 부른다.
  사용자가 애플리케이션을 실행하면 운영체제로부터 실행에 필요한 메모리를 할당받아 애플리케이션의 코드를 실행하는데 이것이 프로세스이다.
  하나의 애플리케이션은 다중프로세스를 만들기도 하는데 예를들어 Chrome을 두 개 실행했다면 두개의 Chrome 프로세서가 생성된 것이다.
  멀티태스킹은 두가지 이상의 작업을 동시에 처리하는 것을 말하는데, 운영체제는 멀티태스킹을 할 수 있도록 CPU 및 메모리 자원을 적절히 할당해주고
  병렬로 실행시킨다. 멀티태스킹의 대표적인 것이 미디어 플레이어이다. 미디어플레이어는 동영상 재생과 음악 재생을 동시에 처리한다.
  하나의 프로세스가 두가지 이상의 작업을 처리할 수 있게 해준 것이 바로 멀티 스레드이다.
  하나의 스레드는 하나의 코드실행흐름이기 때문에 한 프로세스내에 스레드가 두개라면 두개의 코드실행흐름이 생긴다는 의미이다.
  멀티 프로세스 안에 프로세스 1, 프로세스 2 가 있다고 해보자.
  프로세스 1에는 스레드가 2개 즉 멀티스레드가 돌고있고, 프로세스 2에는 스레드가 1개 싱글 스레드가 돌고있다.
  여기서 멀티 프로세스들은 운영체제에서 할당받은 자신의 메모리를 가지고 실핼하기 때문에 서로 독립적이다.
  따라서 프로세스 1에서 오류가 발생해도 프로세스 2에 영향을 미치지 않는다.
  하지만 멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 프로세스 1의 스레드 하나가 예외를 발생시키면 프로세스 1자체가 종료될 수 있어
  다른 스레드 하나에 영항을 미치게 된다.
  그렇기 때문에 멀티 스레드에서는 예외 처리를 잘해야한다.

 메인 스레드
  모든 자바 애플리케이션은 메인 스레드가 메인 메소드를 실행하면서 시작된다.
  메인 스레드는 필요에 따라 작업 스레드들을 만들어서 병렬로 코드를 실행할 수 있다. 즉 멀티스레드를 생성해서 멀티태스킹을 수행한다.
  싱글 스레드 애플리케이션은 메인 스레드가 종료하면 프로세스도 종료된다.
  하지만 멀티스레드 애플리케이션은 실행 중인 스레드가 하나라도 있다면 프로세스는 종료되지 않는다.
  설령 메인 스레드가 작업 스레드보다 먼저 종료되더라도 작업스레드가 실행중이면 프로세는 종료되지 않는다.

작업 스레드 생성과 실행
 멀티 스레드로 실행하는 애플리케이션을 개발하려면 먼저 몇개의 작업을 병렬로 실행할지 결정하고 각 작업별로 스레드를 생성해야한다.
 자바에서는 작업 스레드도 객체로 생성되기 때문에 클래스가 필요하다.
 java.lang.Thread 클래스를 직접 객체화해서 생성해도 되지만, Thread를 상속해서 하위 클래스를 만들어 생성할 수도 있다.

 Thread 클래스로부터 직접 생성
  java.lang.Thread 클래스로부터 작업 스레드 객체를 직접 생성하려면 Runnable을 매개값으로 갖는 생성자를 호출해야한다.
  Thread thread = new Thread(Runnable target);
  Runnable은 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체라고 해서 붙여진 이름이다.
  Runnable은 인터페이스 타입이기 때문에 구현 객체를 만들어 대입해야한다.
  Runnable에는 run()메소드 하나가 정의되어 있는데, 구현클래스는 run()을 재정의해서 작업스레드가 실행할 코드를 작성해야한다.
  Runnable은 작업내용을 가지고 있는 객체이지 실제 스레드는 아니다.
  Runnable 구현객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출하면 비로소 작업 스레드가 생성된다.
  Runnable task = new Task();
  Thread thread = new Thread(task);
  코드를 좀 더 절약하기 위해 Thread생성자를 호출할 때 Runnable 익명객체를 매가값으로 사용할 수 있다. 오히려 이 방법이 더 많이 사용된다.
  Thread thread = new Thread(new Runnable(){
    public void run(){
        스레드가 실행할 코드;
    }
  });
  Runnable 인터페이스는 run() 메소드 하나만 정의되어 있기 때문에 함수적 인터페이스이다.
  따라서 람다식을 매개값으로 사용할 수도 있다. 가장 간단한 방법이지만 자바8부터 지원되며 14장에 람다식이 나오니 설명은 나중에.
  Thread thread = new Thread( () -> {
    스레드가 실행할 코드;
  } );
  작업 스레드는 생성되는 즉시 실행되는 것이 아니라 start() 메소드를 호출해야만 비로소 실행된다.
  start() 메소드가 호출되면 작업스레드는 매개값으로 받은 Runnable의 run() 메소드를 실행하면서 자신의 작업을 처리한다.

 Thread 하위 클래스로부터 생성
  작업 스레드가 실행할 작업을 Runnable로 만들지 않고 Thread의 하위 클래스로 작업스레드를 정의하면서 작업 내용을 포함시킬수 있다.
  작업 스레드 클래스 정의하는 방법은 Thread를 상속한 후 run 메소드를 재정의해서 스레드가 실행할 코드를 작성하면 된다.

 스레드의 이름
  스레디는 자신의 이름을 가지고 있다. 스레드의 이름이 큰 역할을 하는 것은 아니지만 디버깅할 때 어떤스레드가 어떤작업을 하는지 조사할 목적으로
  가끔 사용된다. 메인스레드는 "main"이라는 이름을 가지고있고 직접 생성한 스레드는 자동적으로 "Thread-n"이라는 이름으로 설정된다.
  다른 이름으로 설정하고 싶다면 Thread 클래스의 setName() 메소드로 변경하면 된다.
  반대로 스레드의 이름을 알고싶을땐 getName(); 메소드를 사용하면 된다.
  이 두 메소드는 Thread의 인스턴스 메소드이므로 스레드 객체의 참조가 필요하다.
  만약 스레드 객체의 참조를 가지고 있지 않다면 Thread의 정적 메소드인 currentThread()로 코드를 실행하는 현재 스레드의 참조를 얻을수있다.

스레드 우선순위
 멀티스레드는 동시성 또는 병렬성으로 실행된다.
 동시성은 멀티작업을 위해 하나의 코어에서 멀티 스레드가 번갈아가며 실행하는 성질을 말하고
 병렬성은 멀티작업을 위해 멀티 코어에서 개별 스레드를 동시에 실행하는 성질을 말한다.
 싱글 코어 CPU를 이용한 멀티스레드 작업은 병렬적으로 실행되는 것처럼 보이지만 사실은 번걸아가며 실행하는 동시성 작업이다.
 번갈아 실행하는 것이 워낙 빠르다보니 병렬성으로 보일 뿐이다.
 스레드의 개수가 코어의 개수보다 많을 경우 스레드는 어떤순서로 동시성으로 실행할 것인가를 결정해야하는데 이것을 스레드 스케줄링이라고 한다.
 스레드 스케줄링에 의해 스레드들은 아주 짧은시간에 번갈아가면서 그들의 run() 메소드를 조금씩 실행한다.
 자바의 스레드 스케줄링은 우선순위방식(priority)과 순환할당방식(Round-Robin)이 있다.
 우선순위방식은 우선순위가 높은 스레드가 실행상태를 더 많이 가지도록 스케줄링하는 것이고
 순환할당방식은 시간할당량을 정해서 하나의 스레드를 정해진 시간만큼 실행하고 다른 스레드를 실행하는 것을 말한다.
 스레드 우선순위방식은 스레드 객체에 우선순위 번호를 1부터 10까지 부여할 수 있기때문에 개발자가 코드로 제어할 수 있지만
 순환할당방식은 자바가상기계에 의해서 정해지기 때문에 코드로 제어할 수 없다.
 모든 스레드들은 기본적으로 5의 우선순위를 할당받는다. 만약 순위를 변경하고싶다면 Thread클래스의 setPriority()메소드를 이용하면된다.

동기화 메소드와 동기화 블록
 공유객체를 사용할때 주의할 점
  싱글스레드 프로그램에서는 한 개의 스레드가 객체를 독차지해서 사용하면 되지만
  멀티스레드 프로그램에서는 스레드들이 객체를 공유해서 작업해야 하는 경우가 있다.
  이 경우 스레드 A를 사용하던 객체가 스레드 B에 의해 상태가 변경될 수 있기 때문에 스레드 A가 의도했던 것과 다른 결과를 산출할 수도 있다.

 동기화 메소드 및 동기화 블록
  스레드가 사용중인 객체를 다른 스레드가 변경할 수 없도록 하려면 스레드 작업이 끝날 때까지 객체에 잠금을 걸어서 다른 스레드가 사용할수 없게
  해야한다. 멀티스레드 프로그램에서 하나의 스레드만 실행할 수 있는 코드영역을 임계영역(critical section)이라고 한다.
  자바는 임계영역을 지정하기 위해 동기화(synchronized)메소드와 동기화 블록을 제공한다.
  스레드가 객체 내부의 동기화메소드 또는 블록에 들어가면 즉시 객체에 잠금을 걸어 다른 스레드가 임계영역코드를 실행하지 못하도록한다.
  동기화메소드를 만드는 방법은 메소드 선언에 synchronized 키워드를 붙으면 된다.
  public synchronized void method1()
  synchronized 키워드는 인스턴스 메소드, 정적 메소드 어디든 붙일수있다.
  메소드 전체 내용이 아니라 일부 내용만 임계영역으로 만들고 싶다면 동기화블록을 만들면 된다.
  public void method(){
    여러 스레드가 실행 가능한 영역
    synchronized(공유객체){ //공유객체가 객체 자신이면 this를 넣을 수 있다.
        임계영역;  //단 하나의 스래드만 실행
    }
  }
  만약 동기화 메소드와 동기화 블록이 여러개가 있을 경우, 스레드가 이들 중 하나를 실행할 때
  다른 스레드는 해당 메소드는 물론이고 다른 동기화 메소드 및 블록도 실행할 수 없다.

스레드 상태
 스레드 객체를 생성하고 start() 메소드를 호출하면 바로 스레드가 실행되는 것처럼 보이지만 사실은 실행대기 상태가 된다.
 실행대기 상태는 아직 스케줄링이 되지 않아서 실행을 기다리고 있는 상태를 말한다.
 실행대기 상태에 있는 스레드 중에서 스레드 스케줄링으로 선택된 스레드가 비로서 CPU를 점유하고 run() 메소드를 실행한다.
 이때를 실행상태라고 한다. 실행상태의 스레드는 run()메소드를 모두 실행하기 전에 스레드 스케줄링에 의해 다시 실행대기상태로 돌아갈수있다.
 그리고 실행대기상태에 있는 다른 스레드가 선택되어 실행 상태가 된다.
 이렇게 스레드는 실행대기상태와 실행상태를 번갈아 가면서 run()메소드를 조금씩 실행한다. run()메소드가 종료되면 스레드는 멈추며 종료상태가된다.
 경우에 따라서 스레드는 실행상태에서 실행대기상태로 가지않을 수도 있다. 실행상태에서 일시정지상태로 가기도 하는데 일시정지 상태는
 스레드가 실행할 수 없는 상태이다. 스레드가 다시 실행상태로 가기위해서는 일시정지상태에서 실행대기상태로 가야한다.

 객체생성 상태 - 열거상수 NEW - 스레드객체가생성되었으며 아직 start()메소드가 호출되지않은상태
 실행대기 상태 - 열거상수 RUNNABLE - 실행상태로 언제든지 갈 수 있는상태
 일시정지 상태 - 열거상수 WAITING - 다른 스레드가 통지할때까지 기다리는 상태
 일시정지 상태 - 열거상수 TIMED_WAITING - 주어진 시간동안 기다리는 상태
 일시정지 상태 - 열거상수 BLOCKED - 사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태
 종료상태 - 열거상수 TERMINATED - 실행을 마친 상태

스레드 상태제어
 스레드 상태제어 메소드들 중 wait(), notify(), notifyAll()은 Object 클래스의 메소드들이고 나머지는 Thread 클래스의 메소드들이다.

 주어진 시간동안 일시정지(sleep())
  실행중인 스레드를 일정 시간 멈추게 하고 싶다면 Thread 클래스의 정적 메소드인 sleep()을 사용하면 된다.
  매개값은 밀리세컨드(1/1000) 단위로 시간을 주면 된다. 일시정지 상태에서 주어진 시간이 되기 전에 interrupt() 메소드가 호출되면
  InterruptedException이 발생하기 때문에 예외처리가 필요하다.

 다른스레드에게 실행양보(yield())
  스레드가 처리하는 작업은 반복적인 실행을 위해 for문이나 while문을 포함한느 경우가 많다.
  가끔은 이 반복문들이 의미없는 반복을 하는 경우가 있다.
  yield()메소드를 호출한 스레드는 실행대기 상태로 돌아가고 동일한 우선순위 또는 높은 우선순위를 갖는 다른 스레드가 실행기회를 가진다.

 다른스레드의 종료를 기다림(join())
  스레드는 다른 스레드와 독립적으로 실행하는 것이 기본이지만 다른 스레드가 종료될때까지 기다렸다가 실행해야하는 경우가 발생할 수도있다.
  이런경우 join() 메소드를 이용하면된다.

 스레드 간 협업(wait(), notify(). notifyAll())
  경우에 따라서는 두개의 스레드를 교대로 번갈아가며 실행해야 할 경우가 있다.
  정확한 교대작업이 필요한 경우 자신의 작업이 끝나면 상대방 스레드를 일시정지상태에서 풀어주고 자신은 일시정지상태로 만드는 것이다.
  이방법의 핵심은 공유객체에 있다. 공유객체는 두 스레드가 작업할 내용을 각각 동기화 메소드로 구분해 놓는다
  한 스레드가 작업을 완료하면 notify() 메소드를 호출해서 일시정지상태에 있는 다른 스레드를 실행 대기 상태로 만들고
  자신은 두 번 작업하지 않도록 wait()메소드를 호출하여 일시정지 상태로 만든다.
  만약 wait() 대신 wait(long timeout)이나 wait(long timeout, int nanos)를 사용하면 notify()를 호출하지 않아도 지정된 시간이 지나면
  스레드가 자동적으로 실행대기상태가 된다. notify() 메소드와 동일한 역할을 하는 notifyAll() 메소드도 있는데,
  notify()는 wait()에 의해 일시정지된 스레드들 중 한개를 실행대기상태로 만들고
  notifyAll()은 wait()에 의해 일시정지된 모든 스레드들을 실행대기상태로 만든다.
  이 메소드들은 Thread클래스가 아닌 Object클래스에 선언된 메소드이므로 모든 공유 객체에서 호출이 가능하다.
  주의할 점은 이 메소드들은 동기화메소드 또는 동기화블록 내에서만 사용할 수 있다.

 스레드의 안전한 종료(stop 플래그, interrupt())
  스레드는 자신의 run()메소드가 모두 실행되면 자동적으로 종료된다. 경우에 따라서는 실행 중인 스레드를 즉시 종료할 필요가 있다.
  Thread는 스레드를 즉시 종료시키기 위해서 stop() 메소드를 제공하고 있는데 이 메소드는 deprecated 되었다. 그 이유는 stop 메소드로
  스레드를 갑자기 종료하게 되면 스레드가 사용중이던 자원들이 불안전한 상태로 남겨지기 때문이다.
  stop 플래그를 잘 사용하는 방법은 스레드는 run()메소드가 끝나면 자동적으로 종료되므로
  run() 메소드가 정상적으로 종료되도록 유도하여 stop플래그를 사용해야한다.
  interrupt() 메소드는 스레드가 일시정지 상태에 있을 때 InterruptedException 예외를 발생시키는 역할을 한다.
  이것을 이용하면 run()메소드를 정상 종료시킬 수 있다.
  스레드가 실행대기 또는 실행 상태에 있을 때는 interrupt() 메소드가 실행되면 즉시 InterruptedException 예외가 발생하지않고,
  스레드가 일시정지 상태가 되었을 때 InterruptedException 예외가 발생한다.
  따라서 스레드가 일시정지 상태가 되지않으면 interrupt()는 아무 소용이없다.
  일시정지를 만들지 않고도 interrupt()호출 여부를 알 수 있는 방법이 있는데
  interrupt() 메소드가 호출되었다면 스레드의 interrupted() 정적메소드와 isInterrupted() 인스턴스메소드는 true를 리턴한다.

데몬 스레드
 데몬(daemon)스레드는 주스레드의 작업을 돕는 보조적인 역할을 수행하는 스레드이다.
 주스레드가 종료되면 데몬스레드는 강제적으로 종료되는데 이점을 제외하면 데몬 스레드는 일반 스레드와 큰 차이가 없다.
 데몬스레드의 적용예는 워드프로세서의 자동저장, 미디어 플레이어의 동여상 및 음악재생 등이있는데 이기능들은 주스레드가 종료되면 같이 종료된다.
 스레드를 데몬으로 만들기 위해서는 주 스레드가 데몬이 될 스레드의 setDaemon(true)를 호출해주면 된다.
 주의할 점은 start() 메소드가 호출되고 나서 setDaemon(true)를 호출하면 IllegalThreadStateException이 발생하기 때문에
 start() 메소드 호출 전에 호출해야한다. 현재 실행중인 스레드가 데몬스레드인지 아닌지 구별하는 방법은 isDaemon() 메소드로 조사하면된다.

스레드 그룹
 스레드그룹은 관련된 스레드를 묶어서 관리할 목적으로 이용된다.
 JVM이 실행되면 system 스레드 그룹을 만들고 JVM 운영에 필요한 스레드들을 생성해서 system 스레드 그룹에 포합시킨다.
 스레드는 반드시 하나의 스레드 그룹에 포함되는데 명시적으로는 스레드 그룹에 포함시키지 않으면 기본적으로 자신을 생성한 스레드와 같은 그룹에
 속하게된다. 우리가 생성하는 작업스레드는 대부분 main 스레드가 생성하므로 main 스레드 그룹에 기본적으로 속하게된다.

 스레드 그룹 이름 얻기
  현재 스레드가 속한 스레드 그룹의 이름을 얻고 싶다면
  ThreadGroup group = Thread.currentThread().getThreadGroup();
  String groupName = group.getName();
  Thread의 정적 메소드인 getAllStackTraces()을 이용하면 프로세스 내에서 실행하는 모든 스레드에 대한 정보를 얻을 수 있다.
  Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
  이 메소드는 Map 타입의 객체를 리턴하는데 키는 스레드객체이고 값은 스레드의 상태기록들을 갖고있는 배열이다.

 스레드 그룹 생성
  명시적으로 스레드 그룹을 만들고 싶다면 ThreadGroup()을 이용해 만들면 된다.
  ThreadGroup tg = new ThreadGroup(String name);
  ThreadGroup tg = new ThreadGroup(ThreadGroup parent, String name);
  스레드 그룹 생성시 부모(parent) 스레드 그룹을 지정하지 않으면 현재 스레드가 속한 그룹의 하위 그룹으로 생성된다.

 스레드 그룹의 일괄 interrupt()
  스레드를 스레드 그룹에 포함시키면 스레드 그룹에서 제공하는 interrupt() 메소드를 사용해 그룹 내에 포함된 모든 스레드들을
  일괄 interrupt 할 수있다. 스레드 그룹의 interrupt() 메소드를 한 번만 호출해주면 스레드 그룹의 interrupt() 메소드는
  모든 스레드의 interrupt() 메소드를 내부적으로 호출해 준다.
  스레드 그룹의 interrupt() 메소드는 소속된 스레드의 interrupt()만 호출할 뿐 개별 스레드에서 발생하는 InterruptedException에 대한
  예외 처리를 하지 않는다. 따라서 안전한 종료를 위해 개별 스레드가 예외처리를 해야한다.
  스레드 그룹에는 interrupt() 메소드 이외에도 suspend(), resume(), stop() 메소드가 있는데 모두 Deprecated 되었다.

스레드풀
 병렬 작업 처리가 많아지면 스레드 개수가 증가되고 그에 따른 스레드 생성과 스케줄리응로 인해 CPU가 바빠져 메모리 사용량이 늘어난다.
 이것은 애플리케이션의 성능이 저하된다. 갑작스런 병렬작업의 폭증으로 인한 스레드의 폭증을 막으려면 스레드풀을 사용해야한다.
 스레드풀은 작업처리에 사용되는 스레드를 제한된 개수만큼 정해놓고 작업 큐(Queue)에 들어오는 작업들을 하나씩 스레드가 맡아 처리한다.
 작업처리가 끝난 스레드는 다시 작업 큐에서 새로운 작업을 가져와 처리한다. 이에따라 작업처리 요청이 폭증되어도 스레드의 전체 개수가 늘어나지
 않으므로 애플리케이션의 성능이 급격히 저하되지 않는다. 자바는 스레드풀을 생성하고 사용할 수 있도록 java.util.concurrent 패키지에서
 ExecutorService 인터페이스와 Executors 클래스를 제공하고 있다.

 스레드풀 생성
  ExecutorService 구현 객체는 Executors 클래스의 두가지 메소드 중 하나를 이용해서 간단히 생성할 수 있다.
  newCachedThreadPool(), newFixedThreadPool(int nThreads)
  newCachedThreadPool() 메소드로 생성된 스레드풀의 특징은 초기 스레드 개수와 코어 스레드 개수는 0개고
  스레드 개수보다 작업 개수가 많으면 새 스레드를 생성시켜 작업을 처리한다. 1개 이상의 스레드가 추가되었을 경우 60초 동안 추가된 스레드가
  아무 작업을 하지 않으면 추가된 스레드를 종료하고 풀에서 제거한다.
  ExecutorService executorService = Executors.newCachedThreadPool();
  newFixedThreadPool(int nThreads) 메소드로 생성된 스레드풀의 초기 스레드는 개수는 0개이고,
  코어 스레드 수는 nThreads이다. 스레드 개수보다 작업 개수가 많으면 새 스레드를 생성시키고 작업을 처리한다.
  최대스레드수는 nThreads이다. 이 스레드풀은 스레드가 작업을 처리하지 않고 놀고 있더라도 스레드 개수가 줄지 않는다.
  ExecutorService executorService = Executors.newFixedThreadPool(
    Runtime.getRuntime().availableProcessors());
  이 두 메소드를 사용하지 않고 코어 스레드개수와 최대스레드 개수를 설정하고 싶다면 직접 ThreadPoolExecutor 객체를 생성하면 된다.

 스레드풀 종료
  스레드풀의 스레드는 기본적으로 데몬 스레드가 아니기 때문에 main 스레드가 종료되더라도 작업을 처리하기 위해 계속 실행 상태로 남아있다.
  그래서 main() 메소드가 실행이 끝나도 애플리케이션 프로세스는 종료되지 않는다. 애플리케이션을 종료하려면 스레드풀을 종료시켜 스레드들이
  종료상태가 되도록 처리해줘야한다. 종료와 관련된 세 개의 메소드가 있다.
  void 리턴타입 - shutdown() - 현재 처리중인 작업뿐만 아니라 작업 큐에 대기하고 있는 모든 작업을 처리한 뒤에 스레드풀을 종료시킨다.
  List(Runnable) - shutdownNow() - 현재 작업처리중인 스레드를 interrupt해서 작업 중지를 시도하고 스레드풀을 종료시킨다. 리턴값은
  작업 큐에 있는 미처리된 작업(Runnable)의 목록이다.
  boolean - awaitTermination(long timeout, TimeUnit unit) - shutdown() 메소드 호출 이후 모든 작업처리를 timeout 시간 내에
  완료하면 true를 리턴, 완료하지 못하면 작업 처리 중인 스레드를 interrupt하고 false 리턴.
  남아있는 작업을 마무리하고 스레드풀을 종료할때는 shutdown()을, 강제 종료할때는 shutdownNow()를 일반적으로 호출한다.

 작업생성
  하나의 작업은 Runnable 또는 Callable 구현 클래스로 표현한다.
  두 개의 차이점은 작업 처리 완료 후 리턴값이 있느냐 없느냐이다. Runnable의 run() 메소드는 리턴값이 없고 Callable의 call() 메소드는
  리턴값이 있다. 리턴 타입은 implements Callable<T>에서 지정한 T 타입이다.
  스레드풀의 스레드는 작업 큐에서 Runnable 또는 Callable객체를 가져와 run()과 call() 메소드를 실행한다.

 작업처리요청
  작업처리요청이란 ExecutorService의 작업 큐에 Runnable 또는 Callable 객체를 넣는 행위를 말한다.
  ExecutorService는 작업 처리 요청을 위해 두 가지 종류의 메소드를 제공한다.
  void리턴타입 - execute(Runnable command) - Runnable을 작업 큐에 저장, 작업 처리 결과를 받지못함
  Future<?> - submit(Runnable task) - Runnable 또는 Callable을 작업 큐에 저장, 리턴된 Future를 통해 작업 처리 결과를 얻을 수 있음
  Future<V> - submit(Runnable task, V result)
  Future<V> - submit(Callable<V> task)
  두 메소드의 차이점은 두가지 이다. 하나는 execute()는 작업처리 결과를 받지못하고 submit()은 작업처리 결과를 받게 Future를 리턴한다.
  또 다른 하나는 execute()는 작업 처리 도중 예외가 발생하면 스레드가 종료되고 해당 스레드는 스레드풀에서 제거된다.
  따라서 스레드풀은 다른 작업 처리를 위해 새로운 스레드를 생성한다.
  반면에 submit()은 작업 처리 도중 예외가 밸상하더라도 스레드는 종료되지 않고 다음 작업을 위해 재사용된다.
  그렇기 때문에 가급적이면 스레드의 생성 오버헤더를 줄이기 위해서 submit()을 사용하는 것이 좋다.

 블로킹 방식의 작업 완료 통보
  ExecutorService의 submit() 메소드는 매개값으로 준 Runnable 또는 Callable 작업을 스레드풀의 작업 큐에 저장하고
  즉시 Future객체를 리턴한다.
  Future 객체는 작업 결과가 아니라 작업이 완료될까지 기다렸다가(지연했다가=블로킹되었다가) 최종 결과를 얻는데 사용된다.
  그래서 Future를 지연완료(pending completion) 객체라고 한다. Future의 get() 메소드를 호출하면 스레드가 작업을 완료할때까지
  블로킹되었다가 작업을 완료하면 처리결과를 리턴한다.
  Future가 가지고있는 get() 메소드 설명
  V - get() - 작업이 완료될때까지 블로킹되었다가 처리결과 V를 리턴
  V - get(long timeout, TimeUnit unit) - timeout 시간 전에 작업이 완료되면 결과 V를 리턴, 완료되지않으면 TimeoutException 발생
  리턴 타입인 V는 submit(Runnable task, V result)의 두 번째 매개값인 V 타입이거나 submit(Callable<V> task)의 Callable 타입 V이다.
  메소드 별로 Future의 get() 메소드가 리턴하는 값이 무엇인지 설명
  메소드 // 작업처리완료후 리턴타입 // 작업처리도중 예외발생
  submit(Runnable task) // future.get() -> null // future.get() -> 예외발생
  submit(Runnable task, Integer result) // future.get() -> int 타입값 // future.get() -> 예외발생
  submit(Callable<String> task) // future.get() -> String 타입값 // future.get() -> 예외발생
  Future을 이용한 블로킹 방식의 작업 완료 통보에서 주의할 점은 작업을 처리하는 스레드가 작업을 완료하기 전까지는 get() 메소드가 블로킹되므로
  다른 코드를 실행할 수 없다. 따라서 get() 메소드를 호출하는 스레드는 새로운 스레드이거나 스레드풀의 또 다른 스레드가 되어야한다.
  Future 객체는 작업 결과를 얻기 위한 get() 메소드 이외의 메소드도 제공한다.
  boolean - cancel(boolean mayInterruptIfRunning) - 작업 처리가 진행 중일 경우 취소시킴
  boolean - isCancelled() - 작업이 취소되었는지 여부
  boolean - isDone() - 작업처리가 완료되었는지 여부

 리턴값이 없는 작업 완료 통보
  리턴값이 없는 작업일 경우 Runnable 객체로 생성하면 된다.
  결과값이 없는 작업 처리 요청은 submit(Runnable task) 메소드를 이용하면 된다. 결과값이 없음에도 불구하고 다음과 같이 Future 객체를 리턴
  하는데 이것은 스레드가 작업 처리를 정상적으로 완료했는지 도중에 예외가 발생했는지 확인하기 위함이다.
  Future future = executorService.submit(task);
  작업 처리가 정상적으로 완료 되었다면 Future의 get()메소드는 null을 리턴하지만 스레드가 작업처리도중 interrupt되면
  InterruptedException 을 발생시키고, 작업 처리 도중 예외가 발행하면 ExecutionException을 발생시킨다.
  try{
    future.get();
  }catch(InterruptedException e){
    //작업처리도중 스레드가 interrupt 될경우 실행할 코드
  }catch(ExecutionException e){
    //작업처리도중 예외가 발생된 경우 실행할 코드
  }

 리턴값이 있는 작업 완료 통보
  스레드풀의 스레드가 작업을 완료한 후에 애플리케이션이 처리 결과를 얻어야 된다면 작업 객체를 Callable로 생성하면 된다.
  다음은 Callable 객체를 생성하는 코드인데, 주의할 점은 제네릭 타입 파라미터 T는 call() 메소드가 리턴하는 타입이 되도록 한다.
  Callable<T> task = new Callable<T>{
    @Override
    public T call() throws Exception{
        //스레드가 처리할 작업 내용
        return T;
    }
  };
  Callable 작업의 처리 요청은 Runnable 작업과 마찬가지로 ExecutorService의 submit() 메소드를 호출하면 된다. submit() 메소드는
  작업 큐에 Callable 객체를 저장하고 즉시 Future<T>를 리턴한다. 이때 T는 call() 메소드가 리턴하는 타입이다.
  Future<T> future = executorService.submit(task)
  스레드풀의 스레드가 Callable 객체의 call() 메소드를 모두 실행하고 T 타입의 값을 리턴하면 Future<T>의 get() 메소드는 블로킹이
  해제되고 T타입의 값을 리턴하게 된다.
  try{
    T result = future.get();
 }catch(InterruptedException e){
    //작업 처리 도중 스레드가 interrupt 될 경우 실행할 코드
  }catch(ExecutionException e){
    //작업처리도중 예외가 발생된 경우 실행할 코드
  }

 작업처리결과를 외부 객체에 저장
  상황에 따라서 스레드가 작업한 결과를 외부 객체에 저장해야 할 경우가 있다. 예를 들어 스레드가 작업 처리를 완료하고 외부 Result 객체에
  작업 결과를 저장하면, 애플리케이션이 Result 객체를 사용해서 어떤 작업을 진행할 수 있을 것이다. 대게 Result 객체는 공유객체가 되어
  두 개이상의 스레드 작업을 취합할 목적으로 이용된다. 이런 작업을 하기 위해서 ExecutorService의 submit(Runnable task, V result)
  메소드를 사용할 수 있는데 V가 바로 Result 타입이 된다. 매소드를 호출하면 즉시 Future<V>가 리턴되는데 Future의 get() 메소드를
  호출하면 스레드가 작업을 완료할 때까지 블로킹되었다가 작업을 완료하면 V타입 객체를 리턴한다.
  리턴된 객체는 submit()의 두번째 매개값으로 준 객체와 동일한데, 차이점은 스레드 처리 결과가 내부에 저장되어 있다는 것이다.
  Result result = ...;
  Runnable task = new Task(result);
  Future<Result> future = executorService.submit(task, result);
  result = future.get();
  작업 객체는 Runnable 구현 클래스로 생성하는데, 주의할점은 스레드에서 결과를 저장하기 위해 외부 Result 객체를 사용해야 하므로
  생성자를 통해 Result 객체를 주입받도록 해야한다.
  class Task implements Runnable{
    Result result;
    Task(Result result) {
        this.result = result
    }
    @Override
    public void run(){
        //작업코드 및 처리결과를 result 저장
    }
  }

 작업 완료 순으로 통보
  작업 요청 순서대로 작업 처리가 완료되는 것은 아니다. 작업의 양과 스레드 스케줄링에 따라서 먼저 요청한 작업이 나중에 완료되는 경우도
  발생한다. 여러개의 작업들이 순차적으로 처리될 필요성이 없고 처리 결과도 순차적으로 이용할 필요가 없다면 작업 처리가 완료된 것부터
  결과를 얻어 이용하면 된다. 스레드풀에서 작업 처리가 완료된 것만 통보받는 방법이 있는데 CompletionService를 이용하는 것이다.
  CompletionService는 처리 완료된 작업을 가져오는 poll()과 take() 메소드를 제공한다.
  리턴타입 Future<V> 고정
  poll() - 완료된 작업의 Future를 가져옴, 완료된 작업이 없다면 즉시 null을 리턴
  poll(long timeout, TimeUnit unit) - 완료된 작업의 Future를 가져옴, 완료된 작업이 없다면 timeout까지 블로킹됨
  take() - 완료된 작업의 Future를 가져옴, 완료된 작업이 없다면 있을때까지 블로킹됨
  submit(Callable<V> task) - 스레드풀에 Callable 작업처리 요청
  submit(Runnable task, V result) - 스레드풀에 Runnable 작업처리 요청

  CompletionService 구현 클래스는 ExecutorCompletionService<V>이다. 객체를 생성할 때 생성자 매개값으로 ExecutorService를 제공하면됨
  ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
  CompletionService<V> completionService = new ExecutorCompletionService<V>(executorService);

  poll()과 take() 메소드를 이용해서 처리 완료된 작업의 Future를 얻으려면 CompletionService의 submit()메소드로 작업처리요청을 해야한다.
  completionService.submit(Callable<V> task);
  completionService.submit(Runnable task, V result);

  다음은 take() 메소드를 호출하여 완료된 Callable 작업이 있을 때까지 블로킹되었다가 완료된 작업의 Future을 얻고 get() 메소드로 결과값을
  얻어내는 코드이다. while문은 애플리케이션이 종료될때까지 반복 실행해야 하므로 스레플의 스레드에서 실행하는 것이 좋다.
  executorService.submit(new Runnable(){    //스레드풀의 스레드에서 실행하도록 함
    @Override
    public void run(){
        while(true){
            try{
                Future<Integer> future = completionService.take(); //완료된 작업이 있을떄까지 블로킹, 있으면 Future리턴
                int value = future.get(); //get()은 블로킹되지않고 바로 작업결과를 리턴
                System.out.println("처리결과 "+value);
            }catch(Exception e){
                break;
            }
        }
    }
  }
  take()메소드가 리턴하는 완료된 작업은 submit()으로 처리 요청한 작업의 순서가 아님을 명심해야한다.
  작업의 내용에 따라서 먼저 요청한 작업이 나중에 완료될 수도 있기 때문이다. 더 이상 완료된 작업을 가져올 필요가 없다면 take() 블로킹에서
  빠져나와 while문을 종료해야 한다.

  콜백 방식의 작업 완료 통보
  콜백(Callback)이란 애플리케이션이 스레드에게 작업처리를 요청한 후 스레드가 작업을 완료하면 특정 메소드를 자동 실행하는 기법을 말한다.
  이때 자동 실행되는 메소드를 콜백메소드라고 한다. 블로킹 방식은 작업처리를 요청한 후 작업이 완료될 때까지 블로킹되지만,
  콜백방식은 작업 처리를 요청한 후 결과를 기다릴 필요 없이 다른 기능을 수행할 수 있다. 왜냐면 작업처리가 완료되면 자동적으로 콜백메소드가
  실행되어 결과를 알 수 있기때문이다.
  ExecutorService는 콜백을 위한 별도의 기능을 제공하지 않는다. 하지만 Runnable구현 클래스를 작성할때 콜백기능을 구현할 수 있다.
  먼저 콜백메소드를 가진 클래스가 있어야 하는데, 직접정의해도 되고 java.nio.channels.CompletionHandler를 이용해도 된다.
  이 인터페이스는 비동기통신에서 콜백 객체를 만들때 사용된다. CompletionHandler 객체를 생성하는 코드이다.
  CompletionHandler<V, A> callback = new CompletionHandler<V, A>(){
    @Override
    public void completed(V result, A attachment){
    }
    @Override
    public void failed(Throwable exc, A attachment){
    }
  };
  CompletionHandler는 completed()와 failed() 메소드가 있는데 completed()는 작업을 정상 처리 완료했을 때 호출되는 콜백메소드이고
  failed()는 작업처리도중 예외가 발생했을 때 호출되는 콜백메소드이다. CompletionHandler의 V타입 파라미터는 결과값의 타입이고
  A는 첨부값의 타입이다. 첨부값은 콜백 메소드에 결과값 이외에 추가적으로 전달하는 객체라고 생각하면 된다.
  만약 첨부값이 필요없다면 A는 Void로 지정해주면 된다.
  작업처리결과에 따라 콜백메소드를 호출하는 Runnable 객체이다.
  Runnable task = new Runnable(){
    @Override
    public void run(){
        try{
            //작업처리
            V result = ..;
            callback.completed(result, null); //작업을 정상처리했을 경우 호출
        }catch(Exception e){
            callback.failed(e, null); //예외가 발생했을 경우 호출
        }
    }
  };
  작업처리가 정상적으로 완료되면 completed() 콜백 메소드를 호출해서 결과값을 전달하고 예외가 발생하면 failed() 콜백 메소드를 호출해서
  예외객체를 전달한다.