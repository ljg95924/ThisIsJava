상속: 부모 클래스의 멤버를 자식 클래스에서 쓸 수 있개 해준다.
단 private 접근 제한을 갖는 필드와 메소드는 제외!!
상속을 이용해서 클래스의 수정을 최소화 시켜 유지보수 시간을 절약한다.
상속하는 방법은
class 자식클래스 extends 부모클래스

자식클래스 자식클래스 = new 자식클래스()
위와같이 객체를 생성하면 부모 객체가 먼저 생성되고 자식 객체가 다음에 생성된다.

모든 객체는 클래스의 생성자를 호출해야만 생성된다.
super()은 부모의 기본 생성자를 호출
기본 생성자 외 생성자를 호출해야한다면 spuer(매개값)을 사용
super(매개값)은 반드시 자식생성자 첫줄에 위치해야한다. 만약 사용자가 입력을 안하면 컴파일러가 자동으로 super() 생성

자식클래스에서 부모클래스의 특정한 메소드를 사용해야하지만 수정이 필요한 경우 메소드 오버라이딩 기능을 사용하여
자식클래스에서 동일한 메소드를 재정의할수있음!!
자식클래스에서 메소드가 오버라이딩되었다면 부모 객체의 메소드는 숨겨지고 오버라이딩된 자식 메소드가 호출됨
오버라이딩 규칙
1. 부모 메소드와 동일한 매개값을 가져야한다.
2. 접근 제한을 더 강하게 오버라이딩 할 수 없다.
3. 새로운 예외를 throws 할수 없다.

자식클래스에서 오버라이딩된 메소드를 사용하지않고 부모 메소드를 사용하고 싶을땐 super.부모메소드(); 사용

클래스 앞에 final을 붙이게 되면 그 클래스는 상속할 수 없는 클래스가 되고
메소드 앞에 final을 붙이게 되면 그 메소드는 오버라이딩 할 수 없는 메소드가 된다.

다형성: 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질
자동타입변환: 프로그램 실행도중에 자동적으로 타입변환이 일어나는것
다형성을 위해 자바는 부모클래스로 타입 변환을 허용한다.
ChildClass child = new ChildClass();
ParentsClass parents = child;
->ParentsClass parents = new ChildClass();
위 코드에서 자식클래스와 부모클래스는 동일한 객체를 참조한다(parents == child(=TRUE))
부모 타입으로 자동 타입 변환된 이후에는 자식 객체를 참조하지만 부모클래스에 선언된 필드와 메소드만 접근 가능
그러나! 메소드가 자식클래스에서 오버라이딩되었다면 자식클래스의 메소드가 대신 호출됨!!(중요)
만약 매개 변수의 타입이 클래스일 경우, 해당 클래스의 객체뿐만 아니라 자식 객체까지도 매개값으로 사용할 수 있다.!!(중요)
매개값으로 어떤 자식객체가 제공되느냐에 따라 메소드의 실행 결과는 다양해질 수 있다.
왜냐하면 자식객체가 부모의 메소드를 오버라이딩했다면 메소드 내부에서 오버라이딩된 메소드를 호출하기 때문에 결과가 다양해짐!

강제타입변환: 부모타입을 자식타입으로 변환하는 것(자식타입이 부모타입으로 자동 변환한 후 다시 자식 타입으로 변환할 때 사용가능)
자식클래스 변수 = (자식클래스) 부모클래스타입;
자식 타입이 부모 타입으로 자동 변환하면 부모타입에 선언된 필드와 메소드만 사용 가능하므로,
만약 자식 타입에 선언된 필드와 메소드를 사용해야 하면
강제 타입변환(Casting)을 해서 자식타입으로 변환한 다음 자식타입의 필드와 메소드를 사용

객체타입확인(instanceof):부모 변수가 참조하는 객체가 부모객체인지 자식객체인지 확인 할 수 있으며 주로 매개값의 타입을 조사할때 주로 사용된다.
boolean result = 객체 instanceof 객체

추상클래스: 클래스들의 공통적인 특성을 추출해서 선언한 클래스(클래스들의 부모클래스로만 사용됨)
추상클래스는 클래스의 공통되는 필드와 메소드를 추출해서 만들었기 때문에 객체를 직접 생성해서 사용할수없고 상속을 통해 자식클래스만 사용할수있다.
(new 연산자를 사용해 인스턴스를 생성불가)
추상클래스 용도
1. 클래스들의 공통된 필드와 메소드의 이름을 통일할 목적
2. 클래스를 작성할때 시간을 절약하기 위해

추상메소드: 추상클래스에서만 선언할수 있는 메소드
접근 제한자 abstract 리턴타입 메소드명(매개변수);
추상클래스를 작성할때 하위클래스가 반드시 실행내용을 채우도록 강요하고싶은 메소드가 있을경우 해당 메소드를 추상메소드로 선언함.
자식 클래스는 반드시 추상 메소드를 재정의(오버라이딩)해서 실행 내용을 작성해야 하며 그렇지않으면 컴파일에러가 발생함.

