스트림은 자바8부터 추가된 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 해주는 반복자이다.

 반복자 스트림

  자바7 이전까지는 List<String> 컬렉션에서 요소를 순차적으로 처리하기 위해 Iterator 반복자를 다음과 같이 사용해 왔다
   List<String> list = Arrays.asList("홍길동","갑을병","나란히");
   Iterator<String> iterator = list.iterator();
   while(iterator.hasNext()) {
       String name= iterator.next();
   }
  이 코드를 Stream을 사용해서 변경하면 다음과 같다.
   List<String> list = Arrays.asList("홍길동","갑을병"."나란히");
   Stream<String> stream = list.stream();
   stream.forEach( name -> System.out.println(name) );

  컬렉션의 Stream() 메소드로 스트림 객체를 얻고 나서 stream.forEach() 메소드를 통해 컬렉션의 요소를 하나씩 콘솔에 출력한다.
  forEach() 메소드는 다음과 같이 Consumer 함수적 인터페이스 타입의 매개값을 가지므로 컬렉션의 요소를 소비할 코드를 람다식으로 기술할 수 있다.
  void forEach(Consumer<T> action)
  Iterator를 사용한 코드와 Stream을 사용한 코드를 비교해보면 Stream을 사용하는 것이 훨씬 단순해 보인다.

 스트림의 특징
  Stream은 Iterator와 비슷한 역할을 하는 반복자이지만 람다식으로 요소처리코드를 제공하는 점과 내부 반복자를 사용하므로 병렬처리가 쉽다는 점
  그리고 중간 처리와 최종처리 작업을 수행하는 점에서 많은 차이를 가지고 있다.

  1. 람다식으로 요소 처리 코드를 제공한다.
   Stream이 제공하는 대부분의 요소처리 메소드는 함수적 인터페이스 매개 타입을 가지기 때문에 람다식 또는 메소드 참조를 이용해서 요소 처리 내용을
   매개값으로 전달할 수 있다.

  2. 내부 반복자를 사용하므로 병렬 처리가 쉽다.
   외부반복자란 개발자가 코드로 직접 컬렉션의 요소를 반복해서 가져오는 코드패턴을 말한다.
   index를 이용하는 for문 그리고 Iterator을 이용하는 while문은 모두 외부 반복자를 이용하는 것이다.
   반면에 내부 반복자는 컬렉션 내부에서 요소들을 반복시키고 개발자는 요소당 처리해야 할 코드만 제공하는 코드 패턴을 말한다.
   내부 반복자를 사용해서 얻는 이점은 컬렉션 내부에서 어떻게 요소를 반복시킬 것인가는 컬렉션에게 맡겨두고 개발자는 요소처리 코드에만 집중할 수 있다는 것이다.
   내부 반복자는 요소들의 반복순서를 변경하거나 멀티 코어 CPU를 최대한 활용하기 위해 요소들을 분배시켜 병렬 작업을 할 수 있게 도와주기 때문에
   하나씩 처리하는 순차적 외부 반복자보다는 효율적으로 요소를 반복시킬 수 있다.
   Stream을 이용하면 코드도 간결해지지만 요소의 병렬 처리가 컬렉션 내부에서 처리되므로 효율적이다.
   병렬처리란 한 가지 작업을 서브 작업으로 나누고 서브 작업들을 분리된 스레드에서 병렬적으로 처리하는 것을 말한다.
   병럴 처리 스트림을 이용하면 런타임 시 하나의 작업을 서브 작업으로 자동으로 나누고 서브 작업의 결과를 자동으로 결합해서 최종 결과물을 생성한다.

  3. 스트림은 중간처리와 최종처리를 할 수 있다.
   스트림은 컬렉션의 요소에 대해 중간처리와 최종처리를 수행할 수 있는데 중간처리에서는 매핑, 필터링, 정렬을 수행하고 최종처리에서는 반복, 카운팅, 평균, 총합 등의 집계 처리를 수행한다.

스트림의 종류
 자바 8부터 새로 추가된 java.util.stream 패키지에는 스트림 API들이 있다. 패키지 내용을 보면 BaseStream 인터페이스를 부모로 해서 자식 인터페이스들이 있다.
 BaseStream 인터페이스에는 모든 스트림에서 사용할 수 있는 공통 메소드들이 정의되어 있을 뿐 코드에서 직접적으로 사용되지 않는다.
 하위 스트림인 Stream, IntStream, LongStream, DoubleStream 은 각각 객체요소와 기본 타입인 int, long, double 요소를 처리하는 스트림이다.
 주로 컬렉션과 배열에서 소스을 얻지만 int범위, long범위, 디렉토리, 파일, 랜덤수 소스로 부터 스트림 구현객체를 얻을 수도있다.

스트림 파이프라인
 대량의 데이터를 가공해서 축소하는 것을 일반적으로 리덕션(Reduction)이라고 하는데 데이터의 합계, 평균값, 카운팅, 최대값, 최소값 등이 대표적인 리덕션의 결과물이라고 볼 수 있다.
 그러나 컬렉션의 요소를 리덕션의 결과물로 바로 집계할 수 없을 경우에는 집계하기 좋도록 필터링, 매핑, 정렬, 그룹핑 등의 중간 처리가 필요하다.

 중간처리와 최종처리
  스트림은 데이터의 필터링, 매핑, 정렬, 그룹핑 등의 중간처리와 합계, 평균, 카운팅, 최대값, 최소값 등의 최종처리를 파이프라인으로 해결한다.
  파이프라인은 여러 개의 스트림이 연결되어 있는 구조를 말한다. 파이트라인에서 최종처리를 제외하고는 모두 중간처리 스트림이다.
  중간 스트림이 생성될 때 요소들이 바로 중간처리되는 것이 아니라 최종처리가 시작되기 전까지 중간처리는 지연된다.
  최종처리가 시작되면 비로소 컬렉션의 요소가 하나씩 중간 스트림에서 처리되고 최종처리까지 오게 된다.
  Stream 인터페이스에는 필터링, 매핑, 정렬 등의 많은 중간처리 메소드가 있는데 이 메소드들은 중간처리된 스트림을 리턴한다.
  그리고 이 스트림에서 다시 중간처리 메소드를 호출해서 파이프라인을 형성하게 된다.

 중간처리 메소드와 최종처리 메소드
  중간처리 메소드와 최종처리 메소드를 쉽게 구분하는 방법은 리턴타입을 보면 된다.
  리턴타입이 스트림이라면 중간처리 메소드이고 기본타이거나 OptionalXXX라면 최종처리 메소드이다.

1. 필터링(distinct(), filter())
  필터링은 중간 처리 기능으로 요소를 걸러내는 역할을 한다. 필터링 메소드인 두 메소드는 모든 스트림이 가지고 있는 공통 메소드이다.

  distinct() 메소드는 중복을 제거하는데 Stream의 경우 Object.equals(Object)가 true이면 동일한 객체로 판단하고 중복을 제거한다.
  IntStream, LongStream, DoubleStream은 동일값일 경우 중복을 제거한다.

  filter() 메소드는 매개값으로 주어진 Predicate가 true를 리턴하는 요소만 필터링한다.

2. 매핑(flatMapXXX(), mapXXX(), asXXXStream(), boxed())
 매핑은 중간처리기능으로 스트림의 요소를 다른 요소로 대체하는 작업을 말한다.
 스트림에서 제공하는 매핑 메소드는 flaxXXX(), mapXXX(), asDoubleStream(), asLongStream(), boxed() 가 있다.

 1) flatMapXXX() 메소드
  이 메소드는 요소를 대체하는 복수 개의 요소들로 구성된 새로운 스트림을 리턴한다.
  메소드 종류(리턴타입 - 메소드(매개변수) - 요소->대체요소)
   Stream<R> - flatMap(Function<T, Stream<R>>) - T->Stream<R>
   DoubleStream - flatMap(DoubleFunction<DoubleStream>) - double->DoubleStream //int, long도 동일
   DoubleStream - flatMapToDouble(Function<T, DoubleStream>) - T->DoubleStream //int, long도 동일
   (FlatMapXXXMethod 패키지 참조)

 2) mapXXX() 메소드
  mapXXX() 메소드는 요소를 대체하는 요소로 구성된 새로운 스트림을 리턴한다.
  메소드 종류
   Stream<R> - map(Function<T, R>) - T->R
   DoubleStream - mapToDouble(ToDoubleFunction<T>) - T->double // int,long도 동일
   DoubleStream - map(DoubleUnaryOperator) - double->double // int, long도 동일( int, long->double)
   IntStream - mapToInt(DoubleToIntFunction) - double->int // double,long도 동일
   Stream<U> - mapToObj(DoubleFunction<U>) - double->U //int, long도 동일
   (MapXXXMethod)

 3) asDoubleStream(), asLongStream(), boxed() 메소드
  asDoubleStream() 메소드는 IntStream의 int 요소 또는 LongStream의 long 요소를 double요소로 타입 변환해서 DoubleStream을 생성한다.
  마찬가지로 asLongStream() 메소드는 IntStream의 int 요소를 long 요소로 타입변환해서 LongStream()을 생성한다.
  boxed() 메소드는 int, long, double 요소를 Integer, Long, Double 요소로 박싱해서 Stream을 생성한다.
  메소드 종류
   DoubleStream - asDoubleStream() - int->double, long->double
   LongStream - asLongStream() - int->long
   Stream<Integer> - boxed() - int->Integer // long, double 동일

정렬
 스트림은 요소가 최종 처리되기 전에 중간 단계에서 요소를 정렬해서 최종 처리 순서를 변경할 수 있다.
 요소를 정렬하는 메소드
  Stream<T> - sorted() - 객체를 Comparable 구현 방법에 따라 정렬
  Stream<T> - sorted(Comparator<T>) - 객체를 주어진 Comparator에 따라 정렬
  DoubleStream - sorted() - double 요소를 오름차순으로 정렬 // int, long 동일
 객체 요소일 경우에는 클래스가 Comparable을 구현하지 않으면 sorted() 메소드를 호출했을 때 ClassCastException이 발생하기 때문에
 Comparable을 구현한 요소에서만 sorted() 메소드를 호출해야 한다.

루핑(peek(), forEach())
 루핑은 요소 전체를 반복하는 것을 말한다. 루핑하는 메소드에는 peek(), forEach()가 있다. 이 두 메소드는 루핑한다는 기능은 동일하지만 동작 방식이 다르다.
 peek()는 중간 처리 메소드이고, forEach()는 최종 처리 메소드이다.

 peek()는 중간 처리 단계에서 전체 요소를 루핑하면서 추가적인 작업을 하기 위해 사용한다.
 최종 처리 메소드가 실행되지 않으면 지연되기 때문에 반드시 최종 처리 메소드가 호출되어야 동작한다.
 예를 들어 필터링 후 어떤 요소만 남았는지 확인하기 위해 다음과 같이 peek()를 마지막에 호출하면 스트림은 전혀 동작하지 않는다.
  intStream.filter( a-> a%2 == 0).peek( a -> System.out.println(a) )
 만약 요소 처리의 최종단계가 합을 구하는 거라면 peek()메소드 호출 후 sum()을 호출해야만 peek()가 정상적으로 동작한다.

 forEach()는 최종 처리 메소드이기 때문에 파이프라인 마지막에 루핑하면서 요소를 하나씩 처리한다.
 forEach()는 요소를 소비하는 최종 처리 메소드이므로 이후에 sum()과 같은 다른 최종 메소드를 호출하면 안된다.

매칭(allMatch(), anyMatch(), noneMatch())
 스트림 클래스는 최종 처리 단계에서 요소들이 특정 조건에 만족하는지 조사할 수 있도록 세가지 매칭 메소드를 제공하고 있다.
 allMatch() 메소드는 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하는지 조사하고,
 anyMatch() 메소드는 최소한 한 개의 요소가 매개값으로 주어진 Predicate의 조건을 만족하는지 조사한다.
 noneMatch() 메소드는 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하지 않는지 조사한다.

기본 집계(sum(), count(), average(), max(), min())
 집계(Aggregate)는 최종 처리 기능으로 요소들을 처리해서 카운팅, 합계, 평균값, 최대값, 최소값 등과 같이 하나의 값으로 산출하는 것을 말한다.
 집계는 대량의 데이터를 가공해서 축소하는 리덕션이라고 볼 수 있다.

 스트림이 제공하는 기본 집계
  long - count() - 요수 개수
  OptionalXXX - findFirst() - 첫 번째 요소
  Optional<T>, OptionalXXX - max(Comparator<T>), max() - 최대 요소
  Optional<T>, OptionalXXX - min(Comparator<T>), min() - 최소 요소
  OptionalDouble - average() - 요소 평균
  int, long, double - sum() - 요소 총합
 위 메소드에서 리턴하는 OptionalXXX는 자바 8에서 추가한 OptionalDouble, Int, Long 클래스 타입을 말한다.
 이들은 값을 저장하는 값 기반 클래스(value-based class)들이다. 이 객체에서 값을 얻기 위해서는 get() 또는 getAsDouble(), Int(), Long()을 호출하면 된다.

 Optional 클래스
  Optional, OptionalDouble,Int,Long 클래스들은 저장하는 값의 타입만 다를 뿐 제공하는 기능은 거의 동일하다.
  Optional 클래스는 단순히 집계 값만 저장하는 것이 아니라 집계 값이 존재하지 않을 경우 디폴트 값을 설정할 수도 있고, 집계 값을 처리하는 Consumer도 등록할 수 있다.

  Optional 클래스가 제공하는 메소드
   boolean - isPresent() - 값이 저장되어 있는지 여부
   T,double,int,long - orElse<T>, orElse<double>, orElse<int>, orElse<double>  - 값이 저장되어 있지 않을 경우 디폴트 값 지정
   void - ifPresent(Consumer), ifPresent(DoubleConsumer), ifPresent(IntConsumer), ifPresent(LongConsumer) - 값이 저장되어 있을 경우 Consumer에서 처리

   컬렉션의 요소는 동적으로 추가되는 경우가 많다. 만약 컬렉션의 요소가 추가되지 않아 저장된 요소가 없을 경우
    List<Integer> list = new ArrayList<>();
    double avg = list.stream().mapToint(Interger :: intvalue).average().getAsDouble();
    System.out.printIn("평균: "+avg);
   요소가 없기 때문에 평균값도 있을 수 없다. 그래서 NoSuchElementException 예외가 발생한다.
   이런 요소가 없을 경우 에외를 피하는 세 가지 방법이 있다.

   1. Optional 객체를 얻어 isPresent() 메소드로 평균값 여부를 확인한다. isPresent() 메소드가 true를 리턴할 때만 getAsDouble() 메소드로 평균값을 얻는다.
    OptionalDouble optional = list.stream().mapToInt(Integer :: intValue).average();
    if(optional.isPresent(){
        System.out.println("평균: " + optional.getAsDouble());
    }else{
        System.out.println("평균: 0.0");
    }

    2. orElse() 메소드로 디폴트 값을 정해놓는다. 평균값을 구할 수 없는 경우 orElse()의 매개값이 디폴트 값이 된다.
     double avg = list.stream().mapToInt(Integer :: intValue).average().orElse(0.0);
     System.out.println("평균: " + avg);

    3. ifPresent() 메소드로 평균값이 있을 경우에만 값을 이용하는 람다식을 실행한다.
     list.stream().mapToInt(Integer :: intValue).average().ifPresent(a -> System.out.println("평균: " +a));

커스텀 집계(reduce())
 스트림은 기본 집계 메소드인 sum(), average() 등을 제공하지만, 프로그램화해서 다양한 집계 결과물을 만들 수 있도록 reduce() 메소드를 제공한다.
  인터페이스 - 리턴 타입 - 메소드
  Stream - Optional<T> -  reduce(BinaryOperator<T> accumulator)
  Stream - T - reduce(T identity, BinaryOperator<T> accumulator)
  IntStream - OptionalInt - reduce(IntBinaryOperator op) // long, double 동일
  IntStream - int - reduce(int identity, IntBinaryOperator op) // long, double 동일

 각 인터페이스에는 매개타입으로 XXXOperator, 리턴 타입으로 OptionalXXX, int, long, double을 가지는 reduce() 메소드가 오버로딩 되어있다.
 스트림에 요소가 전혀 없을 경우 디폴트 값인 identity 매개값이 리턴된다. XXXOperator 매개값은 집계 처리를 위한 람다식을 대입한다.
  int sum = studentList.stream().map(Student :: getScore).reduce(0, (a, b) -> a+b);

수집(collect())
 스트림은 요소들을 필터링 또는 매핑한 후 요소들을 수집하는 최종처리 메소드인 collect()를 제공하고 있다.
 이 메소드를 이용하면 필요한 요소만 컬렉션으로 담을 수 있고 요소들을 그룹핑한 후 집계(리덕션) 할 수있다.

 필터링한 요소 수집
  Stream의 collect 메소드는 필터링 또는 매핑도니 요소들을 새로운 컬렉션에 수집하고 이 컬렉션을 리턴한다.
   리턴타입 - 메소드 - 인터페이스
   R - collect(Collector<T,A,R> collector) - Stream
  매개값인 collector은 어떤 요소를 어떤 컬렉션에 수집할 것인지를 결정한다.
  Collector의 타입 파라미터 T는 요소이고, A는 누적기(accumulator)이다. 그리고 R은 요소가 저장될 컬렉션이다.
  풀어서 해석하면 T 요소를 A 누적기가 R에 저장한다는 의미이다.

  Collector의 구현 객체는 다음과 같은 Collectors 클래스의 다양한 정적 메소드를 이용할 수 있다.
   Collector<T,?,List<T>> - toList() - T를 List에 저장
   Collector<T,?,Set<T>> - toSet() - T를 Set에 저장
   Collector<T,?,Collection<T>> - toCollection(Supplier<Collection<T>) - T를 Supplier가 제공한 Collection에 저장
   Collector<T,?,Map<K,U>> - toMap(Function<T,K> keyMapper, Function<T,U> valueMapper) - T를 K와 U로 매핑해서 K를 키로, U를 값으로 Map에 저장
   Collector<T,?,ConcurrentMap<K,U>> - toConcurrentMap(Function<T,K> keyMapper, Function<T,U> valueMapper) - T를 K와 U로 매핑해서 K를 키로, U를 값으로 ConcurrentMap에 저장
  리턴값인 Collector을 보면 A(누적기)가 ?로 되어 있는데 이것은 Collector가 R(컬렉션)에 T(요소)를 저장하는 방법을 알고 있어 A(누적기)가 필요 없기 때문이다.
  다음 코드는 전체 학생 중에서 남학생들만 필터링해서 별도의 List로 생성한다.
   1. Stream<Student> totalStream = totalList.stream();
   2. Stream<Student> maleStream = totalStream.fliter(s->s.getSet() == Student.Sex.MALE);
   3. Collector<Student, ?, List<Student>> collector = Collectors.toList();
   4. List<Student> maleList = maleStream.collect(collector);
  1. 전체학생 List에서 Stream을 얻는다. 2. 남학생만 필터링해서 Stream을 얻는다. 3. List에 Student를 수집하는 Collector를 얻는다.
  4. Stream에서 collect() 메소드로 Student를 수집해서 새로운 List를 얻는다.

  위 코드에서 변수를 생략하면 다음과 같다.
   List<Student> maleList = totalList.stream().filter(s->s.getSex() == Student.Sex.MALE).collect(Collectors.toList());

  다음 코드는 전체 학생 중에서 여학생들만 필터링해서 별도의 HashSet으로 생성한다.
   1. Stream<Student> totalStream = totalList.stream();
   2. Stream<Student> femaleStream = totalStream.filter(s->s.getSex() == Student.Sex.FEMALE);
   3. Supplier<HashSet<Student>> supplier = HashSet :: new;
   4. Collector<Student,?,HashSet<Student>> collector = Collectors.toCollection(supplier);
   5. Set<Student> femaleSet = femaleStream.collect(collector);
  3. 새로운 HashSet을 공급하는 Supplier를 얻는다. 4. Supplier가 공급하는 HashSet에 Student를 수집하는 Collector를 얻는다.
  5. Stream에서 collect() 메소드로 Student를 수집해서 새로운 HashSet을 얻는다.

  위 코드에서 변수를 생략하면 다음과같다.
   Set<Student> femaleSet = totalList.stream().filer(s->s.getSex() == Student.Sex.FEMALE).collect(Collectors.toCollection(HashSet :: new));

 사용자 정의 컨테이너에 수집하기
  List, Set, Map 과 같은 컬렉션이 아닌 사용자 정의 컨테이너 객체에 수집하는 방법 알이보기
  스트림은 요소들을 필터링, 매핑해서 사용자 정의 컨테이너 객체에 수집할 수 있도록 다음의 collect() 메소드를 추가적으로 제공한다.
  인터페이스 - 리턴타입 - 메소드
   Stream - R - collect(Supplier<R>, BiConsumer<R,? super T>, BiConsumer<R,R>)
   IntStream - R - collect(Supplier<R>, ObjIntConsumer<R>, BiConsumer<R,R>) // Long, Double 동일
  첫번째 Supplier는 요소들이 수집될 컨테이너 객체(R)를 생성하는 역할을 한다. 순차처리(싱글 스레드) 스트림에서는 단 한번 supllier가 실행되고 하나의 컨테이너 객체를 생성한다.
  병렬 처리(멀티 스레드) 스트림에서는 여러번 Supplier가 실행되고 스레드별로 여러 개의 컨테이너 객체를 생성한다. 하지만 최종적으로 하나의 컨테이너 객체로 결합된다.
  두번째 XXXConumser는 컨테이너 객체(R)에 요소(T)를 수집하는 역할을 한다. 스트림에서 요소를 컨테이너에 수집할 때마다 XXXConsumer가 실행된다.
  세번째 BiConsumer는 컨테이너 객체(R)을 결합하는 역할을 한다. 순차 처리 스트림에서는 호출되지 않고, 병렬 처리 스트림에서만 호출되어
  스레드별로 생성된 컨테이너 객체를 결합해서 최종 컨테이너 객체를 완성한다.

  리턴타입 R은 요소들이 최종 수집된 컨테이너 객체이다. 순차 처리 스트림에서는 리턴 객체가 첫번째 Supplier가 생성한 객체지만,
  병렬 처리 스트림에서는 최종 결합된 컨테이너 객체가 된다. 병렬처리는 다음절에서 하고 순차처리부터 하자.


